---
import ThemeToggle from '../components/ui/ThemeToggle.astro';
import '../styles/globals.css';

export interface Props {
  title: string;
  description?: string;
  showThemeToggle?: boolean;
}

const {
  title,
  description = "Constitutional compliance web application with performance optimization",
  showThemeToggle = true
} = Astro.props;

// Ensure BASE_URL has trailing slash for correct asset paths on GitHub Pages
const baseUrlRaw = import.meta.env.BASE_URL || '/';
const base = baseUrlRaw.endsWith('/') ? baseUrlRaw : baseUrlRaw + '/';
---

<!DOCTYPE html>
<html lang="en" class="h-full">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="generator" content={Astro.generator} />

    <!-- Performance optimizations -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />

    <!-- Favicon and app icons (use base URL) -->
    <link rel="icon" type="image/svg+xml" href={base + 'favicon.svg'} />
    <link rel="alternate icon" href={base + 'favicon.ico'} />

    <!-- SEO and social media meta tags -->
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:type" content="website" />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />

    <!-- Theme support -->
    <meta name="theme-color" content="#ffffff" media="(prefers-color-scheme: light)" />
    <meta name="theme-color" content="#09090b" media="(prefers-color-scheme: dark)" />

    <title>{title}</title>

    <!-- Inline critical CSS for performance -->
    <style>
      /* Critical CSS for layout shift prevention */
      html { scroll-behavior: smooth; }
      body {
        font-family: system-ui, -apple-system, sans-serif;
        line-height: 1.6;
        margin: 0;
        padding: 0;
      }

      /* Loading state to prevent CLS */
      .loading-skeleton {
        background: linear-gradient(90deg, #f0f0f0 25%, transparent 37%, #f0f0f0 63%);
        background-size: 400% 100%;
        animation: loading 1.4s ease infinite;
      }

      @keyframes loading {
        0% { background-position: 100% 50%; }
        100% { background-position: -100% 50%; }
      }

      @media (prefers-color-scheme: dark) {
        .loading-skeleton {
          background: linear-gradient(90deg, #374151 25%, transparent 37%, #374151 63%);
        }
      }

      /* Dark mode toggle preparation */
      .dark-mode-toggle {
        transition: background-color 0.3s ease, border-color 0.3s ease;
      }
    </style>
  </head>
  <body class="min-h-full bg-background text-foreground antialiased">
    <!-- Skip to main content for accessibility -->
    <a href="#main-content" class="sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 bg-primary text-primary-foreground px-4 py-2 rounded-md z-50">
      Skip to main content
    </a>

    <!-- Header with theme toggle -->
    {showThemeToggle && (
      <header class="sticky top-0 z-40 w-full border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
        <div class="container mx-auto px-4 py-3">
          <div class="flex items-center justify-between">
            <div class="flex items-center space-x-4">
              <h1 class="text-lg font-semibold">{title}</h1>
            </div>
            <nav class="flex items-center space-x-4">
              <ThemeToggle showLabel={false} size="md" />
            </nav>
          </div>
        </div>
      </header>
    )}

    <!-- Main content area -->
    <main id="main-content" class="min-h-screen">
      <slot />
    </main>

    <!-- Footer for constitutional compliance and branding -->
    <footer class="border-t bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
      <div class="container mx-auto px-4 py-6">
        <div class="flex flex-col items-center justify-between gap-4 md:flex-row">
          <p class="text-sm text-muted-foreground">
            Built with <a href="https://astro.build" class="underline underline-offset-4 hover:text-foreground transition-colors">Astro</a>,
            <a href="https://tailwindcss.com" class="underline underline-offset-4 hover:text-foreground transition-colors">Tailwind CSS</a>, and
            <a href="https://ui.shadcn.com" class="underline underline-offset-4 hover:text-foreground transition-colors">shadcn/ui</a>
          </p>
          <p class="text-sm text-muted-foreground">
            Constitutional compliance: Zero GitHub Actions • Local CI/CD • Performance first
          </p>
        </div>
      </div>
    </footer>

    <!-- Global styles imported in frontmatter -->

    <!-- Theme detection and initialization -->
    <script>
      // Constitutional theme initialization to prevent FOUC
      (function() {
        // Immediate theme detection for performance
        const getStoredTheme = () => {
          try {
            return localStorage.getItem('theme');
          } catch {
            return null;
          }
        };

        const getSystemTheme = () => {
          if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
            return 'dark';
          }
          return 'light';
        };

        const resolveTheme = (theme: string | null): string => {
          if (theme === 'system') {
            return getSystemTheme();
          }
          return theme || 'system';
        };

        // Get theme with fallback hierarchy
        const storedTheme = getStoredTheme();
        const theme = storedTheme || 'system';
        const resolvedTheme = resolveTheme(theme);

        // Apply theme immediately
        document.documentElement.classList.remove('light', 'dark');
        document.documentElement.classList.add(resolvedTheme);
        document.documentElement.style.colorScheme = resolvedTheme;

        // Store resolved theme
        try {
          localStorage.setItem('theme', theme);
        } catch {
          // Ignore storage errors
        }

        // Set theme color meta tag with constitutional type safety
        const themeColorMeta = document.querySelector('meta[name="theme-color"]') as HTMLMetaElement;
        if (themeColorMeta && 'content' in themeColorMeta) {
          themeColorMeta.content = resolvedTheme === 'dark' ? '#09090b' : '#ffffff';
        }
      })();

      // Initialize theme provider when DOM is ready
      document.addEventListener('DOMContentLoaded', async () => {
        try {
          // Simple theme initialization for GitHub Actions compatibility
          const storedTheme = localStorage.getItem('theme') || 'system';
          const systemTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
          const resolvedTheme = storedTheme === 'system' ? systemTheme : storedTheme;

          document.documentElement.classList.remove('light', 'dark');
          document.documentElement.classList.add(resolvedTheme);
          document.documentElement.style.colorScheme = resolvedTheme;

          console.log('Theme initialized:', resolvedTheme);

          // Basic accessibility initialization
          console.log('Accessibility features initialized');

          // Basic performance monitoring
          console.log('Performance monitoring initialized');

        } catch (error) {
          console.warn('Failed to initialize theme system:', error);
        }
      });

      // Performance monitoring for Core Web Vitals
      if ('performance' in window && 'PerformanceObserver' in window) {
        // Monitor Largest Contentful Paint (LCP)
        new PerformanceObserver((entryList) => {
          const entries = entryList.getEntries();
          const lastEntry = entries[entries.length - 1];
          if (lastEntry) {
            console.log('LCP:', lastEntry.startTime);
          }
        }).observe({ entryTypes: ['largest-contentful-paint'] });

        // Monitor First Input Delay (FID)
        new PerformanceObserver((entryList) => {
          for (const entry of entryList.getEntries()) {
            const fidEntry = entry as PerformanceEventTiming;
            if (fidEntry.processingStart) {
              console.log('FID:', fidEntry.processingStart - fidEntry.startTime);
            }
          }
        }).observe({ entryTypes: ['first-input'] });

        // Monitor Cumulative Layout Shift (CLS)
        let clsValue = 0;
        new PerformanceObserver((entryList) => {
          for (const entry of entryList.getEntries()) {
            const clsEntry = entry as any; // CLS entries have specific properties
            if (clsEntry.hadRecentInput !== undefined && !clsEntry.hadRecentInput) {
              clsValue += clsEntry.value || 0;
              console.log('CLS:', clsValue);
            }
          }
        }).observe({ entryTypes: ['layout-shift'] });
      }
    </script>
  </body>
</html>