---
/**
 * Advanced Search Component
 * Constitutional compliance: Zero JavaScript by default, progressive enhancement
 * Features: Multi-criteria search, filtering, sorting, accessibility
 */

interface Props {
  searchPlaceholder?: string;
  categories?: Array<{id: string; label: string}>;
  sortOptions?: Array<{value: string; label: string}>;
  class?: string;
}

const {
  searchPlaceholder = "Search documentation, guides, and components...",
  categories = [
    {id: "all", label: "All Content"},
    {id: "docs", label: "Documentation"},
    {id: "components", label: "Components"},
    {id: "guides", label: "Guides"},
    {id: "api", label: "API Reference"},
    {id: "constitutional", label: "Constitutional"}
  ],
  sortOptions = [
    {value: "relevance", label: "Relevance"},
    {value: "date", label: "Date Updated"},
    {value: "title", label: "Title A-Z"},
    {value: "category", label: "Category"}
  ],
  class: className
} = Astro.props;

// Generate unique IDs for accessibility
const searchId = `search-${Math.random().toString(36).substr(2, 9)}`;
const categoryId = `category-${Math.random().toString(36).substr(2, 9)}`;
const sortId = `sort-${Math.random().toString(36).substr(2, 9)}`;
---

<div class={`advanced-search ${className || ''}`} role="search">
  <!-- Search Form -->
  <form class="search-form" role="search" aria-label="Advanced search">
    <div class="search-input-group">
      <label for={searchId} class="sr-only">Search query</label>
      <div class="search-input-container">
        <input
          type="search"
          id={searchId}
          name="q"
          class="search-input"
          placeholder={searchPlaceholder}
          autocomplete="off"
          spellcheck="false"
          aria-describedby={`${searchId}-help`}
        />
        <button type="submit" class="search-button" aria-label="Execute search">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" aria-hidden="true">
            <circle cx="11" cy="11" r="8"></circle>
            <path d="m21 21-4.35-4.35"></path>
          </svg>
        </button>
      </div>
      <div id={`${searchId}-help`} class="search-help">
        Search across all documentation, components, and guides. Use quotes for exact phrases.
      </div>
    </div>

    <!-- Filters Row -->
    <div class="search-filters">
      <!-- Category Filter -->
      <div class="filter-group">
        <label for={categoryId} class="filter-label">Category</label>
        <select id={categoryId} name="category" class="filter-select">
          {categories.map(category => (
            <option value={category.id}>{category.label}</option>
          ))}
        </select>
      </div>

      <!-- Sort Options -->
      <div class="filter-group">
        <label for={sortId} class="filter-label">Sort by</label>
        <select id={sortId} name="sort" class="filter-select">
          {sortOptions.map(option => (
            <option value={option.value}>{option.label}</option>
          ))}
        </select>
      </div>

      <!-- Advanced Options Toggle -->
      <button
        type="button"
        class="advanced-toggle"
        aria-expanded="false"
        aria-controls="advanced-options"
        data-toggle="advanced-options"
      >
        Advanced
        <svg width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" aria-hidden="true">
          <polyline points="6,9 12,15 18,9"></polyline>
        </svg>
      </button>

      <!-- Clear Filters -->
      <button type="button" class="clear-filters" aria-label="Clear all filters">
        Clear
      </button>
    </div>

    <!-- Advanced Options (Hidden by default) -->
    <div id="advanced-options" class="advanced-options" hidden>
      <div class="advanced-grid">
        <!-- File Type Filter -->
        <fieldset class="filter-fieldset">
          <legend class="filter-legend">File Types</legend>
          <div class="checkbox-group">
            <label class="checkbox-label">
              <input type="checkbox" name="filetype" value="md" class="checkbox-input" />
              <span class="checkbox-text">Markdown (.md)</span>
            </label>
            <label class="checkbox-label">
              <input type="checkbox" name="filetype" value="astro" class="checkbox-input" />
              <span class="checkbox-text">Astro (.astro)</span>
            </label>
            <label class="checkbox-label">
              <input type="checkbox" name="filetype" value="ts" class="checkbox-input" />
              <span class="checkbox-text">TypeScript (.ts)</span>
            </label>
            <label class="checkbox-label">
              <input type="checkbox" name="filetype" value="py" class="checkbox-input" />
              <span class="checkbox-text">Python (.py)</span>
            </label>
          </div>
        </fieldset>

        <!-- Date Range Filter -->
        <fieldset class="filter-fieldset">
          <legend class="filter-legend">Date Range</legend>
          <div class="date-range">
            <label for="date-from" class="date-label">From</label>
            <input type="date" id="date-from" name="date_from" class="date-input" />

            <label for="date-to" class="date-label">To</label>
            <input type="date" id="date-to" name="date_to" class="date-input" />
          </div>
        </fieldset>

        <!-- Tags Filter -->
        <fieldset class="filter-fieldset">
          <legend class="filter-legend">Tags</legend>
          <div class="tags-container">
            <input
              type="text"
              name="tags"
              class="tags-input"
              placeholder="Enter tags separated by commas"
              aria-describedby="tags-help"
            />
            <div id="tags-help" class="field-help">
              Common tags: performance, accessibility, constitutional, components
            </div>
          </div>
        </fieldset>
      </div>
    </div>
  </form>

  <!-- Search Results Container -->
  <div id="search-results" class="search-results" role="region" aria-label="Search results" aria-live="polite">
    <!-- Results will be populated here -->
    <div class="search-placeholder">
      <svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1" class="search-icon" aria-hidden="true">
        <circle cx="11" cy="11" r="8"></circle>
        <path d="m21 21-4.35-4.35"></path>
      </svg>
      <p class="placeholder-text">Enter a search query to find documentation, components, and guides</p>
      <div class="search-suggestions">
        <p class="suggestions-label">Popular searches:</p>
        <ul class="suggestions-list">
          <li><button type="button" class="suggestion-link" data-search="performance optimization">Performance Optimization</button></li>
          <li><button type="button" class="suggestion-link" data-search="accessibility compliance">Accessibility Compliance</button></li>
          <li><button type="button" class="suggestion-link" data-search="constitutional requirements">Constitutional Requirements</button></li>
          <li><button type="button" class="suggestion-link" data-search="component documentation">Component Documentation</button></li>
        </ul>
      </div>
    </div>
  </div>

  <!-- Search Statistics -->
  <div id="search-stats" class="search-stats" hidden>
    <p class="stats-text">
      <span id="results-count">0</span> results found
      <span id="search-time"></span>
    </p>
  </div>
</div>

<style>
  .advanced-search {
    @apply w-full max-w-4xl mx-auto space-y-6;
  }

  /* Search Form */
  .search-form {
    @apply space-y-4;
  }

  .search-input-group {
    @apply space-y-2;
  }

  .search-input-container {
    @apply relative;
  }

  .search-input {
    @apply w-full px-4 py-3 pr-12 text-base border border-input rounded-lg
           bg-background text-foreground placeholder:text-muted-foreground
           focus:outline-none focus:ring-2 focus:ring-ring focus:border-transparent
           transition-colors duration-200;
  }

  .search-button {
    @apply absolute right-2 top-1/2 -translate-y-1/2 p-2 rounded-md
           text-muted-foreground hover:text-foreground hover:bg-accent
           focus:outline-none focus:ring-2 focus:ring-ring
           transition-colors duration-200;
  }

  .search-help {
    @apply text-sm text-muted-foreground;
  }

  /* Filters */
  .search-filters {
    @apply flex flex-wrap items-center gap-4 p-4 bg-muted/50 rounded-lg border;
  }

  .filter-group {
    @apply flex items-center gap-2;
  }

  .filter-label {
    @apply text-sm font-medium text-foreground;
  }

  .filter-select {
    @apply px-3 py-1.5 text-sm border border-input rounded-md
           bg-background text-foreground
           focus:outline-none focus:ring-2 focus:ring-ring focus:border-transparent;
  }

  .advanced-toggle {
    @apply flex items-center gap-1 px-3 py-1.5 text-sm font-medium
           text-foreground bg-background border border-input rounded-md
           hover:bg-accent focus:outline-none focus:ring-2 focus:ring-ring
           transition-colors duration-200;
  }

  .advanced-toggle[aria-expanded="true"] svg {
    @apply rotate-180;
  }

  .clear-filters {
    @apply px-3 py-1.5 text-sm font-medium text-destructive
           hover:bg-destructive/10 rounded-md
           focus:outline-none focus:ring-2 focus:ring-ring
           transition-colors duration-200;
  }

  /* Advanced Options */
  .advanced-options {
    @apply p-4 border border-input rounded-lg bg-background;
  }

  .advanced-grid {
    @apply grid gap-6 md:grid-cols-2 lg:grid-cols-3;
  }

  .filter-fieldset {
    @apply border border-input rounded-lg p-4;
  }

  .filter-legend {
    @apply px-2 text-sm font-medium text-foreground;
  }

  .checkbox-group {
    @apply space-y-2 mt-3;
  }

  .checkbox-label {
    @apply flex items-center gap-2 text-sm cursor-pointer;
  }

  .checkbox-input {
    @apply rounded border-input text-primary focus:ring-ring;
  }

  .checkbox-text {
    @apply text-foreground;
  }

  .date-range {
    @apply grid grid-cols-2 gap-3 mt-3;
  }

  .date-label {
    @apply text-sm font-medium text-foreground;
  }

  .date-input {
    @apply px-3 py-1.5 text-sm border border-input rounded-md
           bg-background text-foreground
           focus:outline-none focus:ring-2 focus:ring-ring focus:border-transparent;
  }

  .tags-container {
    @apply space-y-2 mt-3;
  }

  .tags-input {
    @apply w-full px-3 py-1.5 text-sm border border-input rounded-md
           bg-background text-foreground placeholder:text-muted-foreground
           focus:outline-none focus:ring-2 focus:ring-ring focus:border-transparent;
  }

  .field-help {
    @apply text-xs text-muted-foreground;
  }

  /* Search Results */
  .search-results {
    @apply min-h-[300px] p-6 border border-input rounded-lg bg-background;
  }

  .search-placeholder {
    @apply flex flex-col items-center justify-center text-center space-y-4 py-8;
  }

  .search-icon {
    @apply text-muted-foreground;
  }

  .placeholder-text {
    @apply text-muted-foreground;
  }

  .search-suggestions {
    @apply space-y-2;
  }

  .suggestions-label {
    @apply text-sm font-medium text-foreground;
  }

  .suggestions-list {
    @apply flex flex-wrap justify-center gap-2;
  }

  .suggestion-link {
    @apply px-3 py-1 text-sm text-primary bg-primary/10 rounded-full
           hover:bg-primary/20 focus:outline-none focus:ring-2 focus:ring-ring
           transition-colors duration-200;
  }

  /* Search Statistics */
  .search-stats {
    @apply flex justify-between items-center text-sm text-muted-foreground;
  }

  .stats-text {
    @apply space-x-2;
  }

  /* Responsive Design */
  @media (max-width: 768px) {
    .search-filters {
      @apply flex-col items-stretch gap-3;
    }

    .filter-group {
      @apply flex-col items-stretch gap-1;
    }

    .advanced-grid {
      @apply grid-cols-1;
    }
  }

  /* Accessibility Enhancements */
  @media (prefers-reduced-motion: reduce) {
    .advanced-toggle svg,
    .search-button,
    .clear-filters,
    .suggestion-link {
      @apply transition-none;
    }
  }

  /* High Contrast Mode */
  @media (prefers-contrast: high) {
    .search-input,
    .filter-select,
    .advanced-toggle {
      @apply border-2;
    }
  }

  /* Dark Mode Optimizations */
  .dark .search-placeholder {
    @apply text-muted-foreground;
  }

  .dark .search-icon {
    @apply text-muted-foreground/70;
  }

  /* Screen Reader Only */
  .sr-only {
    @apply absolute w-px h-px p-0 -m-px overflow-hidden whitespace-nowrap border-0;
    clip: rect(0, 0, 0, 0);
  }
</style>

<script>
  // Progressive enhancement for advanced search functionality
  class AdvancedSearch {
    private form: HTMLFormElement;
    private searchInput: HTMLInputElement;
    private advancedToggle: HTMLButtonElement;
    private advancedOptions: HTMLElement;
    private resultsContainer: HTMLElement;
    private statsContainer: HTMLElement;
    private searchData: any[] = [];

    constructor() {
      this.init();
    }

    private init() {
      this.form = document.querySelector('.search-form') as HTMLFormElement;
      this.searchInput = document.querySelector('.search-input') as HTMLInputElement;
      this.advancedToggle = document.querySelector('[data-toggle="advanced-options"]') as HTMLButtonElement;
      this.advancedOptions = document.getElementById('advanced-options') as HTMLElement;
      this.resultsContainer = document.getElementById('search-results') as HTMLElement;
      this.statsContainer = document.getElementById('search-stats') as HTMLElement;

      if (!this.form || !this.searchInput) return;

      this.setupEventListeners();
      this.loadSearchIndex();
    }

    private setupEventListeners() {
      // Form submission
      this.form.addEventListener('submit', (e) => {
        e.preventDefault();
        this.performSearch();
      });

      // Real-time search (debounced)
      let searchTimeout: number;
      this.searchInput.addEventListener('input', () => {
        clearTimeout(searchTimeout);
        searchTimeout = window.setTimeout(() => {
          if (this.searchInput.value.length >= 3) {
            this.performSearch();
          } else if (this.searchInput.value.length === 0) {
            this.clearResults();
          }
        }, 300);
      });

      // Advanced options toggle
      if (this.advancedToggle && this.advancedOptions) {
        this.advancedToggle.addEventListener('click', () => {
          this.toggleAdvancedOptions();
        });
      }

      // Suggestion links
      document.querySelectorAll('[data-search]').forEach(link => {
        link.addEventListener('click', (e) => {
          const target = e.target as HTMLElement;
          const searchTerm = target.getAttribute('data-search');
          if (searchTerm) {
            this.searchInput.value = searchTerm;
            this.performSearch();
          }
        });
      });

      // Clear filters
      document.querySelector('.clear-filters')?.addEventListener('click', () => {
        this.clearFilters();
      });

      // Filter changes
      this.form.addEventListener('change', () => {
        if (this.searchInput.value) {
          this.performSearch();
        }
      });
    }

    private async loadSearchIndex() {
      try {
        // In a real implementation, this would load from a search index
        // For now, we'll simulate with local data
        this.searchData = await this.generateSearchIndex();
      } catch (error) {
        console.warn('Failed to load search index:', error);
      }
    }

    private async generateSearchIndex() {
      // Simulate loading search data
      // In production, this would be generated from documentation files
      return [
        {
          title: "Component Library Documentation",
          content: "shadcn/ui + Astro integration guide with usage patterns",
          category: "components",
          filetype: "md",
          path: "/docs/guides/component-library.md",
          lastModified: "2025-09-20",
          tags: ["components", "ui", "shadcn", "astro"]
        },
        {
          title: "Performance Optimization Guide",
          content: "Constitutional performance targets and optimization strategies",
          category: "guides",
          filetype: "md",
          path: "/docs/performance/optimization-guide.md",
          lastModified: "2025-09-20",
          tags: ["performance", "optimization", "constitutional", "lighthouse"]
        },
        {
          title: "Constitutional Compliance Handbook",
          content: "Complete constitutional requirements and validation procedures",
          category: "constitutional",
          filetype: "md",
          path: "/docs/constitutional/compliance-handbook.md",
          lastModified: "2025-09-20",
          tags: ["constitutional", "compliance", "requirements", "validation"]
        },
        {
          title: "Accessibility Compliance Procedures",
          content: "WCAG 2.1 AA compliance procedures and testing guidelines",
          category: "constitutional",
          filetype: "md",
          path: "/docs/constitutional/accessibility-compliance.md",
          lastModified: "2025-09-20",
          tags: ["accessibility", "wcag", "compliance", "testing"]
        },
        {
          title: "Troubleshooting & FAQ",
          content: "Constitutional troubleshooting framework with emergency procedures",
          category: "guides",
          filetype: "md",
          path: "/docs/guides/troubleshooting.md",
          lastModified: "2025-09-20",
          tags: ["troubleshooting", "faq", "emergency", "recovery"]
        }
      ];
    }

    private performSearch() {
      const startTime = performance.now();
      const formData = new FormData(this.form);
      const query = formData.get('q') as string;
      const category = formData.get('category') as string;
      const sort = formData.get('sort') as string;
      const filetypes = formData.getAll('filetype') as string[];
      const dateFrom = formData.get('date_from') as string;
      const dateTo = formData.get('date_to') as string;
      const tags = formData.get('tags') as string;

      if (!query || query.length < 1) {
        this.clearResults();
        return;
      }

      // Filter results
      let results = this.searchData.filter(item => {
        // Text search
        const searchableText = `${item.title} ${item.content} ${item.tags.join(' ')}`.toLowerCase();
        const queryMatch = query.toLowerCase().split(' ').every(term =>
          searchableText.includes(term)
        );

        if (!queryMatch) return false;

        // Category filter
        if (category && category !== 'all' && item.category !== category) {
          return false;
        }

        // File type filter
        if (filetypes.length > 0 && !filetypes.includes(item.filetype)) {
          return false;
        }

        // Date range filter
        if (dateFrom && item.lastModified < dateFrom) return false;
        if (dateTo && item.lastModified > dateTo) return false;

        // Tags filter
        if (tags) {
          const searchTags = tags.toLowerCase().split(',').map(t => t.trim());
          const hasMatchingTag = searchTags.some(tag =>
            item.tags.some(itemTag => itemTag.toLowerCase().includes(tag))
          );
          if (!hasMatchingTag) return false;
        }

        return true;
      });

      // Sort results
      results = this.sortResults(results, sort, query);

      // Render results
      this.renderResults(results, query, performance.now() - startTime);
    }

    private sortResults(results: any[], sortBy: string, query: string) {
      switch (sortBy) {
        case 'date':
          return results.sort((a, b) => new Date(b.lastModified).getTime() - new Date(a.lastModified).getTime());
        case 'title':
          return results.sort((a, b) => a.title.localeCompare(b.title));
        case 'category':
          return results.sort((a, b) => a.category.localeCompare(b.category));
        case 'relevance':
        default:
          return results.sort((a, b) => {
            const aScore = this.calculateRelevanceScore(a, query);
            const bScore = this.calculateRelevanceScore(b, query);
            return bScore - aScore;
          });
      }
    }

    private calculateRelevanceScore(item: any, query: string): number {
      const queryLower = query.toLowerCase();
      let score = 0;

      // Title matches are most important
      if (item.title.toLowerCase().includes(queryLower)) score += 10;

      // Tag matches are highly relevant
      if (item.tags.some((tag: string) => tag.toLowerCase().includes(queryLower))) score += 5;

      // Content matches
      if (item.content.toLowerCase().includes(queryLower)) score += 3;

      // Category boost for exact matches
      if (item.category.toLowerCase() === queryLower) score += 7;

      return score;
    }

    private renderResults(results: any[], query: string, searchTime: number) {
      // Show stats
      this.statsContainer.hidden = false;
      const resultsCount = document.getElementById('results-count');
      const searchTimeEl = document.getElementById('search-time');

      if (resultsCount) resultsCount.textContent = results.length.toString();
      if (searchTimeEl) searchTimeEl.textContent = `(${searchTime.toFixed(0)}ms)`;

      // Render results
      if (results.length === 0) {
        this.resultsContainer.innerHTML = `
          <div class="no-results">
            <svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1" aria-hidden="true">
              <circle cx="11" cy="11" r="8"></circle>
              <path d="m21 21-4.35-4.35"></path>
            </svg>
            <h3>No results found</h3>
            <p>Try adjusting your search terms or filters</p>
          </div>
        `;
      } else {
        const resultsHtml = results.map(result => `
          <article class="search-result">
            <div class="result-header">
              <h3 class="result-title">
                <a href="${result.path}" class="result-link">${this.highlightQuery(result.title, query)}</a>
              </h3>
              <div class="result-meta">
                <span class="result-category">${result.category}</span>
                <span class="result-date">${new Date(result.lastModified).toLocaleDateString()}</span>
              </div>
            </div>
            <p class="result-content">${this.highlightQuery(result.content, query)}</p>
            <div class="result-tags">
              ${result.tags.map((tag: string) => `<span class="result-tag">${tag}</span>`).join('')}
            </div>
          </article>
        `).join('');

        this.resultsContainer.innerHTML = `<div class="results-list">${resultsHtml}</div>`;
      }

      // Announce to screen readers
      this.announceResults(results.length);
    }

    private highlightQuery(text: string, query: string): string {
      if (!query) return text;

      const regex = new RegExp(`(${query.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')})`, 'gi');
      return text.replace(regex, '<mark>$1</mark>');
    }

    private announceResults(count: number) {
      const announcement = `${count} search results found`;
      const announcer = document.createElement('div');
      announcer.setAttribute('aria-live', 'polite');
      announcer.setAttribute('aria-atomic', 'true');
      announcer.className = 'sr-only';
      announcer.textContent = announcement;

      document.body.appendChild(announcer);
      setTimeout(() => document.body.removeChild(announcer), 1000);
    }

    private toggleAdvancedOptions() {
      const isExpanded = this.advancedToggle.getAttribute('aria-expanded') === 'true';
      this.advancedToggle.setAttribute('aria-expanded', (!isExpanded).toString());
      this.advancedOptions.hidden = isExpanded;
    }

    private clearResults() {
      this.resultsContainer.innerHTML = `
        <div class="search-placeholder">
          <svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1" class="search-icon" aria-hidden="true">
            <circle cx="11" cy="11" r="8"></circle>
            <path d="m21 21-4.35-4.35"></path>
          </svg>
          <p class="placeholder-text">Enter a search query to find documentation, components, and guides</p>
        </div>
      `;
      this.statsContainer.hidden = true;
    }

    private clearFilters() {
      const form = this.form;
      // Reset all form elements except search input
      const elements = form.elements;
      for (let i = 0; i < elements.length; i++) {
        const element = elements[i] as HTMLFormElement;
        if (element !== this.searchInput) {
          if (element.type === 'checkbox' || element.type === 'radio') {
            element.checked = false;
          } else if (element.tagName === 'SELECT') {
            element.selectedIndex = 0;
          } else if (element.type !== 'submit' && element.type !== 'button') {
            element.value = '';
          }
        }
      }

      // Collapse advanced options
      this.advancedToggle.setAttribute('aria-expanded', 'false');
      this.advancedOptions.hidden = true;

      // Re-run search if there's a query
      if (this.searchInput.value) {
        this.performSearch();
      }
    }
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => new AdvancedSearch());
  } else {
    new AdvancedSearch();
  }
</script>

<style>
  /* Search Results Styles */
  .results-list {
    @apply space-y-4;
  }

  .search-result {
    @apply p-4 border border-input rounded-lg bg-card hover:bg-accent/50 transition-colors duration-200;
  }

  .result-header {
    @apply flex justify-between items-start gap-4 mb-2;
  }

  .result-title {
    @apply text-lg font-semibold;
  }

  .result-link {
    @apply text-foreground hover:text-primary transition-colors duration-200;
  }

  .result-meta {
    @apply flex items-center gap-2 text-sm text-muted-foreground;
  }

  .result-category {
    @apply px-2 py-1 bg-primary/10 text-primary rounded-full text-xs font-medium;
  }

  .result-content {
    @apply text-muted-foreground mb-3 line-clamp-2;
  }

  .result-tags {
    @apply flex flex-wrap gap-1;
  }

  .result-tag {
    @apply px-2 py-0.5 bg-muted text-muted-foreground rounded text-xs;
  }

  .no-results {
    @apply flex flex-col items-center justify-center text-center space-y-4 py-12;
  }

  .no-results h3 {
    @apply text-lg font-semibold text-foreground;
  }

  .no-results p {
    @apply text-muted-foreground;
  }

  /* Search highlighting */
  mark {
    @apply bg-yellow-200 text-yellow-900 dark:bg-yellow-800 dark:text-yellow-100 px-0.5 rounded;
  }

  /* Line clamp utility */
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>