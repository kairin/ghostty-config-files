---
/**
 * Error Boundary Component
 * Constitutional compliance: Graceful degradation, accessibility-first error handling
 * Features: Error recovery, fallback UI, progressive enhancement
 */

interface Props {
  fallbackComponent?: string;
  errorLevel?: 'critical' | 'warning' | 'info';
  showDetails?: boolean;
  reportErrors?: boolean;
  retryEnabled?: boolean;
  class?: string;
}

const {
  fallbackComponent = 'default',
  errorLevel = 'warning',
  showDetails = false,
  reportErrors = true,
  retryEnabled = true,
  class: className
} = Astro.props;

// Generate unique ID for error boundary
const boundaryId = `error-boundary-${Math.random().toString(36).substr(2, 9)}`;
---

<div
  class={`error-boundary ${className || ''}`}
  data-error-boundary-id={boundaryId}
  data-error-level={errorLevel}
  data-show-details={showDetails}
  data-report-errors={reportErrors}
  data-retry-enabled={retryEnabled}
>
  <!-- Main Content Slot -->
  <div class="boundary-content" data-boundary-content>
    <slot />
  </div>

  <!-- Error Fallback UI -->
  <div class="error-fallback" data-error-fallback hidden>
    {fallbackComponent === 'minimal' && (
      <div class="error-minimal">
        <div class="error-icon" aria-hidden="true">‚ö†Ô∏è</div>
        <p class="error-message">Something went wrong. Please try again.</p>
        {retryEnabled && (
          <button type="button" class="retry-button" data-retry-action>
            Try Again
          </button>
        )}
      </div>
    )}

    {fallbackComponent === 'detailed' && (
      <div class="error-detailed">
        <div class="error-header">
          <div class="error-icon" aria-hidden="true">
            {errorLevel === 'critical' && 'üö®'}
            {errorLevel === 'warning' && '‚ö†Ô∏è'}
            {errorLevel === 'info' && '‚ÑπÔ∏è'}
          </div>
          <h3 class="error-title">
            {errorLevel === 'critical' && 'Critical Error'}
            {errorLevel === 'warning' && 'Something Went Wrong'}
            {errorLevel === 'info' && 'Notice'}
          </h3>
        </div>

        <div class="error-content">
          <p class="error-description">
            We encountered an issue while loading this content. This might be a temporary problem.
          </p>

          <details class="error-details" data-error-details>
            <summary class="details-summary">Technical Details</summary>
            <div class="details-content">
              <div class="error-info">
                <div class="info-item">
                  <span class="info-label">Error ID:</span>
                  <span class="info-value" data-error-id>N/A</span>
                </div>
                <div class="info-item">
                  <span class="info-label">Time:</span>
                  <span class="info-value" data-error-time>N/A</span>
                </div>
                <div class="info-item">
                  <span class="info-label">Component:</span>
                  <span class="info-value" data-error-component>N/A</span>
                </div>
              </div>

              <div class="error-stack" data-error-stack hidden>
                <h4 class="stack-title">Error Details:</h4>
                <pre class="stack-trace" data-stack-trace></pre>
              </div>
            </div>
          </details>

          <div class="error-actions">
            {retryEnabled && (
              <button type="button" class="action-button primary" data-retry-action>
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" aria-hidden="true">
                  <polyline points="23,4 23,10 17,10"></polyline>
                  <path d="M20.49 15a9 9 0 1 1-2.12-9.36L23 10"></path>
                </svg>
                Retry
              </button>
            )}

            <button type="button" class="action-button secondary" data-reload-action>
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" aria-hidden="true">
                <path d="M21 12a9 9 0 1 1-6.219-8.56"></path>
              </svg>
              Reload Page
            </button>

            {reportErrors && (
              <button type="button" class="action-button secondary" data-report-action>
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" aria-hidden="true">
                  <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
                  <polyline points="14,2 14,8 20,8"></polyline>
                  <line x1="16" y1="13" x2="8" y2="13"></line>
                  <line x1="16" y1="17" x2="8" y2="17"></line>
                  <polyline points="10,9 9,9 8,9"></polyline>
                </svg>
                Report Issue
              </button>
            )}
          </div>
        </div>
      </div>
    )}

    {fallbackComponent === 'default' && (
      <div class="error-default">
        <div class="error-card">
          <div class="error-header">
            <div class="error-icon" aria-hidden="true">‚ö†Ô∏è</div>
            <div class="error-text">
              <h3 class="error-title">Content Unavailable</h3>
              <p class="error-message">We're having trouble loading this content right now.</p>
            </div>
          </div>

          <div class="error-suggestions">
            <h4 class="suggestions-title">What you can try:</h4>
            <ul class="suggestions-list">
              <li>Check your internet connection</li>
              <li>Refresh the page</li>
              <li>Try again in a few moments</li>
              <li>Contact support if the problem persists</li>
            </ul>
          </div>

          <div class="error-actions">
            {retryEnabled && (
              <button type="button" class="action-button primary" data-retry-action>
                Try Again
              </button>
            )}
            <button type="button" class="action-button secondary" data-reload-action>
              Reload Page
            </button>
          </div>
        </div>
      </div>
    )}

    {fallbackComponent === 'constitutional' && (
      <div class="error-constitutional">
        <div class="constitutional-error">
          <div class="constitutional-header">
            <div class="constitutional-icon">üèõÔ∏è</div>
            <div class="constitutional-content">
              <h3 class="constitutional-title">Constitutional Framework Error</h3>
              <p class="constitutional-message">
                An error occurred while maintaining constitutional compliance.
              </p>
            </div>
          </div>

          <div class="constitutional-status">
            <div class="status-grid">
              <div class="status-item">
                <span class="status-icon">‚ö°</span>
                <span class="status-text">Performance Maintained</span>
              </div>
              <div class="status-item">
                <span class="status-icon">‚ôø</span>
                <span class="status-text">Accessibility Preserved</span>
              </div>
              <div class="status-item">
                <span class="status-icon">üîí</span>
                <span class="status-text">User Data Protected</span>
              </div>
            </div>
          </div>

          <div class="constitutional-recovery">
            <p class="recovery-message">
              The constitutional framework ensures graceful degradation. Core functionality remains available.
            </p>

            <div class="recovery-actions">
              {retryEnabled && (
                <button type="button" class="action-button primary" data-retry-action>
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" aria-hidden="true">
                    <polyline points="23,4 23,10 17,10"></polyline>
                    <path d="M20.49 15a9 9 0 1 1-2.12-9.36L23 10"></path>
                  </svg>
                  Restore Component
                </button>
              )}

              <button type="button" class="action-button secondary" data-safe-mode-action>
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" aria-hidden="true">
                  <rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
                  <circle cx="9" cy="9" r="2"></circle>
                  <path d="M21 15.5c-.3-3.1-1.7-6-6.5-8.5"></path>
                </svg>
                Safe Mode
              </button>
            </div>
          </div>
        </div>
      </div>
    )}
  </div>

  <!-- Error Reporting Modal -->
  <div class="error-report-modal" data-report-modal hidden role="dialog" aria-labelledby="report-title" aria-modal="true">
    <div class="report-backdrop" data-report-close></div>
    <div class="report-container">
      <header class="report-header">
        <h3 id="report-title" class="report-title">Report Issue</h3>
        <button type="button" class="report-close" aria-label="Close report dialog" data-report-close>
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" aria-hidden="true">
            <line x1="18" y1="6" x2="6" y2="18"></line>
            <line x1="6" y1="6" x2="18" y2="18"></line>
          </svg>
        </button>
      </header>

      <form class="report-form" data-report-form>
        <div class="form-group">
          <label for="report-description" class="form-label">
            Describe what you were trying to do when the error occurred:
          </label>
          <textarea
            id="report-description"
            name="description"
            class="form-textarea"
            rows="4"
            placeholder="Please provide details about what happened..."
            required
          ></textarea>
        </div>

        <div class="form-group">
          <label for="report-email" class="form-label">
            Email (optional - for follow-up):
          </label>
          <input
            type="email"
            id="report-email"
            name="email"
            class="form-input"
            placeholder="your@email.com"
          />
        </div>

        <div class="form-group">
          <label class="form-checkbox-label">
            <input type="checkbox" name="include_technical" class="form-checkbox" checked />
            <span class="checkbox-text">Include technical details</span>
          </label>
        </div>

        <div class="report-actions">
          <button type="submit" class="action-button primary">
            Submit Report
          </button>
          <button type="button" class="action-button secondary" data-report-close>
            Cancel
          </button>
        </div>
      </form>
    </div>
  </div>

  <!-- Success/Loading States -->
  <div class="error-notifications" data-notifications aria-live="polite" aria-atomic="true"></div>
</div>

<style>
  .error-boundary {
    @apply relative w-full;
  }

  .boundary-content {
    @apply w-full;
  }

  /* Error Fallback Styles */
  .error-fallback {
    @apply w-full;
  }

  /* Minimal Error UI */
  .error-minimal {
    @apply flex items-center gap-3 p-4 bg-destructive/10 border border-destructive/20 rounded-lg;
  }

  .error-minimal .error-icon {
    @apply text-xl;
  }

  .error-minimal .error-message {
    @apply flex-1 text-destructive font-medium;
  }

  .retry-button {
    @apply px-3 py-1 bg-destructive text-destructive-foreground rounded-md text-sm
           hover:bg-destructive/90 focus:outline-none focus:ring-2 focus:ring-ring
           transition-colors duration-200;
  }

  /* Detailed Error UI */
  .error-detailed {
    @apply space-y-4;
  }

  .error-header {
    @apply flex items-center gap-3;
  }

  .error-header .error-icon {
    @apply text-2xl;
  }

  .error-title {
    @apply text-xl font-semibold text-foreground;
  }

  .error-content {
    @apply space-y-4;
  }

  .error-description {
    @apply text-muted-foreground;
  }

  /* Error Details */
  .error-details {
    @apply border border-input rounded-lg;
  }

  .details-summary {
    @apply p-3 cursor-pointer hover:bg-accent text-sm font-medium
           focus:outline-none focus:ring-2 focus:ring-ring;
  }

  .details-content {
    @apply p-3 border-t border-input space-y-4;
  }

  .error-info {
    @apply space-y-2;
  }

  .info-item {
    @apply flex justify-between text-sm;
  }

  .info-label {
    @apply font-medium text-foreground;
  }

  .info-value {
    @apply text-muted-foreground font-mono;
  }

  .error-stack {
    @apply space-y-2;
  }

  .stack-title {
    @apply text-sm font-medium text-foreground;
  }

  .stack-trace {
    @apply text-xs bg-muted p-3 rounded-md overflow-x-auto text-muted-foreground font-mono;
  }

  /* Error Actions */
  .error-actions {
    @apply flex flex-wrap gap-2;
  }

  .action-button {
    @apply flex items-center gap-2 px-4 py-2 rounded-md font-medium text-sm
           transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-ring;
  }

  .action-button.primary {
    @apply bg-primary text-primary-foreground hover:bg-primary/90;
  }

  .action-button.secondary {
    @apply bg-secondary text-secondary-foreground hover:bg-secondary/80;
  }

  /* Default Error UI */
  .error-default {
    @apply flex justify-center p-6;
  }

  .error-card {
    @apply max-w-md w-full p-6 border border-input rounded-lg bg-card space-y-4;
  }

  .error-card .error-header {
    @apply flex items-start gap-3;
  }

  .error-card .error-icon {
    @apply text-2xl mt-1;
  }

  .error-text {
    @apply flex-1 space-y-1;
  }

  .error-card .error-title {
    @apply text-lg font-semibold text-foreground;
  }

  .error-card .error-message {
    @apply text-muted-foreground;
  }

  /* Error Suggestions */
  .error-suggestions {
    @apply space-y-2;
  }

  .suggestions-title {
    @apply text-sm font-medium text-foreground;
  }

  .suggestions-list {
    @apply text-sm text-muted-foreground space-y-1 ml-4 list-disc;
  }

  /* Constitutional Error UI */
  .error-constitutional {
    @apply p-6 border-2 border-primary rounded-lg bg-primary/5;
  }

  .constitutional-error {
    @apply space-y-6;
  }

  .constitutional-header {
    @apply flex items-start gap-4;
  }

  .constitutional-icon {
    @apply text-3xl;
  }

  .constitutional-content {
    @apply flex-1 space-y-2;
  }

  .constitutional-title {
    @apply text-xl font-bold text-foreground;
  }

  .constitutional-message {
    @apply text-muted-foreground;
  }

  /* Constitutional Status */
  .constitutional-status {
    @apply p-4 bg-background border border-input rounded-lg;
  }

  .status-grid {
    @apply grid gap-3 md:grid-cols-3;
  }

  .status-item {
    @apply flex items-center gap-2 text-sm;
  }

  .status-icon {
    @apply text-lg;
  }

  .status-text {
    @apply text-foreground font-medium;
  }

  /* Constitutional Recovery */
  .constitutional-recovery {
    @apply space-y-4;
  }

  .recovery-message {
    @apply text-muted-foreground;
  }

  .recovery-actions {
    @apply flex flex-wrap gap-3;
  }

  /* Error Report Modal */
  .error-report-modal {
    @apply fixed inset-0 z-50 flex items-center justify-center p-4;
  }

  .report-backdrop {
    @apply absolute inset-0 bg-black/50 backdrop-blur-sm;
  }

  .report-container {
    @apply relative w-full max-w-md bg-background border border-input rounded-lg shadow-xl;
  }

  .report-header {
    @apply flex items-center justify-between p-4 border-b border-input;
  }

  .report-title {
    @apply text-lg font-semibold text-foreground;
  }

  .report-close {
    @apply p-2 rounded-md text-muted-foreground hover:text-foreground hover:bg-accent
           focus:outline-none focus:ring-2 focus:ring-ring;
  }

  /* Report Form */
  .report-form {
    @apply p-4 space-y-4;
  }

  .form-group {
    @apply space-y-2;
  }

  .form-label {
    @apply block text-sm font-medium text-foreground;
  }

  .form-textarea,
  .form-input {
    @apply w-full px-3 py-2 border border-input rounded-md bg-background text-foreground
           placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring
           focus:border-transparent;
  }

  .form-textarea {
    @apply resize-vertical;
  }

  .form-checkbox-label {
    @apply flex items-center gap-2 cursor-pointer;
  }

  .form-checkbox {
    @apply rounded border-input text-primary focus:ring-ring;
  }

  .checkbox-text {
    @apply text-sm text-foreground;
  }

  .report-actions {
    @apply flex gap-2 justify-end;
  }

  /* Notifications */
  .error-notifications {
    @apply fixed bottom-4 right-4 z-40 space-y-2;
  }

  /* Responsive Design */
  @media (max-width: 640px) {
    .error-actions,
    .recovery-actions {
      @apply flex-col;
    }

    .action-button {
      @apply w-full justify-center;
    }

    .status-grid {
      @apply grid-cols-1;
    }
  }

  /* Accessibility Enhancements */
  @media (prefers-reduced-motion: reduce) {
    .action-button {
      @apply transition-none;
    }
  }

  /* High Contrast Mode */
  @media (prefers-contrast: high) {
    .error-card,
    .constitutional-error {
      @apply border-2;
    }
  }
</style>

<script>
  // Progressive enhancement for error boundary functionality
  class ErrorBoundary {
    private container: HTMLElement;
    private boundaryId: string;
    private contentElement: HTMLElement;
    private fallbackElement: HTMLElement;
    private errorLevel: string;
    private showDetails: boolean;
    private reportErrors: boolean;
    private retryEnabled: boolean;
    private errorCount: number = 0;
    private maxRetries: number = 3;

    constructor(container: HTMLElement) {
      this.container = container;
      this.boundaryId = container.dataset.errorBoundaryId || '';
      this.errorLevel = container.dataset.errorLevel || 'warning';
      this.showDetails = container.dataset.showDetails === 'true';
      this.reportErrors = container.dataset.reportErrors === 'true';
      this.retryEnabled = container.dataset.retryEnabled === 'true';

      this.contentElement = container.querySelector('[data-boundary-content]') as HTMLElement;
      this.fallbackElement = container.querySelector('[data-error-fallback]') as HTMLElement;

      this.init();
    }

    private init() {
      this.setupErrorHandling();
      this.setupEventListeners();
      this.setupMutationObserver();
    }

    private setupErrorHandling() {
      // Global error handler
      window.addEventListener('error', (event) => {
        if (this.isErrorFromBoundary(event)) {
          this.handleError(event.error, event);
        }
      });

      // Promise rejection handler
      window.addEventListener('unhandledrejection', (event) => {
        if (this.isErrorFromBoundary(event)) {
          this.handleError(event.reason, event);
        }
      });

      // Component-specific error handling
      this.setupComponentErrorHandling();
    }

    private setupComponentErrorHandling() {
      // Monitor for component errors within the boundary
      const scripts = this.contentElement.querySelectorAll('script');
      scripts.forEach(script => {
        try {
          // Wrap script execution in try-catch
          const originalContent = script.textContent;
          if (originalContent) {
            script.textContent = `
              try {
                ${originalContent}
              } catch (error) {
                window.dispatchEvent(new CustomEvent('boundary-error', {
                  detail: { error, boundaryId: '${this.boundaryId}' }
                }));
              }
            `;
          }
        } catch (e) {
          console.warn('Could not wrap script in error handler:', e);
        }
      });

      // Custom boundary error events
      window.addEventListener('boundary-error', (event: any) => {
        if (event.detail.boundaryId === this.boundaryId) {
          this.handleError(event.detail.error);
        }
      });
    }

    private setupEventListeners() {
      // Retry action
      const retryButtons = this.container.querySelectorAll('[data-retry-action]');
      retryButtons.forEach(button => {
        button.addEventListener('click', () => this.retryComponent());
      });

      // Reload action
      const reloadButtons = this.container.querySelectorAll('[data-reload-action]');
      reloadButtons.forEach(button => {
        button.addEventListener('click', () => this.reloadPage());
      });

      // Report action
      const reportButtons = this.container.querySelectorAll('[data-report-action]');
      reportButtons.forEach(button => {
        button.addEventListener('click', () => this.showReportModal());
      });

      // Safe mode action
      const safeModeButtons = this.container.querySelectorAll('[data-safe-mode-action]');
      safeModeButtons.forEach(button => {
        button.addEventListener('click', () => this.enableSafeMode());
      });

      // Report modal handlers
      this.setupReportModalHandlers();
    }

    private setupReportModalHandlers() {
      const modal = this.container.querySelector('[data-report-modal]') as HTMLElement;
      const closeButtons = this.container.querySelectorAll('[data-report-close]');
      const form = this.container.querySelector('[data-report-form]') as HTMLFormElement;

      closeButtons.forEach(button => {
        button.addEventListener('click', () => this.hideReportModal());
      });

      modal?.addEventListener('click', (e) => {
        if (e.target === modal.querySelector('.report-backdrop')) {
          this.hideReportModal();
        }
      });

      form?.addEventListener('submit', (e) => {
        e.preventDefault();
        this.submitErrorReport(new FormData(form));
      });
    }

    private setupMutationObserver() {
      // Monitor for DOM changes that might indicate errors
      if ('MutationObserver' in window) {
        const observer = new MutationObserver((mutations) => {
          mutations.forEach(mutation => {
            // Check for error-related DOM changes
            if (mutation.type === 'childList') {
              const addedNodes = Array.from(mutation.addedNodes);
              addedNodes.forEach(node => {
                if (node.nodeType === Node.ELEMENT_NODE) {
                  const element = node as Element;
                  if (element.classList?.contains('error') ||
                      element.textContent?.toLowerCase().includes('error')) {
                    this.handleDOMError(element);
                  }
                }
              });
            }
          });
        });

        observer.observe(this.contentElement, {
          childList: true,
          subtree: true
        });
      }
    }

    private isErrorFromBoundary(event: any): boolean {
      // Check if error originated from within this boundary
      if (event.target) {
        return this.contentElement.contains(event.target);
      }

      // Check stack trace for boundary-related files
      if (event.error?.stack) {
        return event.error.stack.includes(this.boundaryId);
      }

      return false;
    }

    private handleError(error: Error, event?: any) {
      this.errorCount++;

      console.error('Error boundary caught error:', error);

      // Create error info
      const errorInfo = {
        id: this.generateErrorId(),
        time: new Date().toISOString(),
        component: this.boundaryId,
        message: error.message || 'Unknown error',
        stack: error.stack || 'No stack trace available',
        level: this.errorLevel,
        count: this.errorCount,
        userAgent: navigator.userAgent,
        url: window.location.href
      };

      // Update error display
      this.updateErrorDisplay(errorInfo);

      // Show fallback UI
      this.showFallback();

      // Report error if enabled
      if (this.reportErrors) {
        this.reportError(errorInfo);
      }

      // Announce error to screen readers
      this.announceError(errorInfo);
    }

    private handleDOMError(element: Element) {
      const errorInfo = {
        id: this.generateErrorId(),
        time: new Date().toISOString(),
        component: this.boundaryId,
        message: 'DOM error detected',
        stack: `Element: ${element.tagName}, Content: ${element.textContent?.substring(0, 100)}`,
        level: 'warning',
        count: this.errorCount,
        userAgent: navigator.userAgent,
        url: window.location.href
      };

      this.updateErrorDisplay(errorInfo);
    }

    private updateErrorDisplay(errorInfo: any) {
      // Update error details in fallback UI
      const errorIdEl = this.fallbackElement.querySelector('[data-error-id]');
      const errorTimeEl = this.fallbackElement.querySelector('[data-error-time]');
      const errorComponentEl = this.fallbackElement.querySelector('[data-error-component]');
      const stackTraceEl = this.fallbackElement.querySelector('[data-stack-trace]');

      if (errorIdEl) errorIdEl.textContent = errorInfo.id;
      if (errorTimeEl) errorTimeEl.textContent = new Date(errorInfo.time).toLocaleString();
      if (errorComponentEl) errorComponentEl.textContent = errorInfo.component;

      if (stackTraceEl && this.showDetails) {
        stackTraceEl.textContent = errorInfo.stack;
        const stackContainer = this.fallbackElement.querySelector('[data-error-stack]') as HTMLElement;
        if (stackContainer) stackContainer.removeAttribute('hidden');
      }
    }

    private showFallback() {
      this.contentElement.style.display = 'none';
      this.fallbackElement.removeAttribute('hidden');

      // Focus management for accessibility
      const firstFocusable = this.fallbackElement.querySelector('button') as HTMLElement;
      if (firstFocusable) {
        setTimeout(() => firstFocusable.focus(), 100);
      }
    }

    private hideFallback() {
      this.fallbackElement.setAttribute('hidden', '');
      this.contentElement.style.display = '';
    }

    private retryComponent() {
      if (this.errorCount >= this.maxRetries) {
        this.showNotification('Maximum retry attempts reached. Please reload the page.', 'warning');
        return;
      }

      this.showNotification('Retrying...', 'info');

      // Attempt to restore component
      try {
        this.hideFallback();

        // Re-initialize component scripts
        this.reinitializeComponent();

        this.showNotification('Component restored successfully!', 'success');
      } catch (error) {
        this.showNotification('Retry failed. Try reloading the page.', 'error');
        this.showFallback();
      }
    }

    private reinitializeComponent() {
      // Reinitialize any JavaScript within the component
      const scripts = this.contentElement.querySelectorAll('script');
      scripts.forEach(script => {
        try {
          if (script.textContent) {
            eval(script.textContent);
          }
        } catch (error) {
          console.warn('Failed to reinitialize script:', error);
        }
      });

      // Dispatch component reinitialization event
      this.contentElement.dispatchEvent(new CustomEvent('component-reinitialized', {
        detail: { boundaryId: this.boundaryId }
      }));
    }

    private reloadPage() {
      this.showNotification('Reloading page...', 'info');
      window.location.reload();
    }

    private enableSafeMode() {
      // Enable safe mode by removing potentially problematic scripts
      this.showNotification('Enabling safe mode...', 'info');

      const scripts = this.contentElement.querySelectorAll('script');
      scripts.forEach(script => {
        script.remove();
      });

      // Remove event listeners
      const interactiveElements = this.contentElement.querySelectorAll('[onclick], [onload], [onerror]');
      interactiveElements.forEach(element => {
        element.removeAttribute('onclick');
        element.removeAttribute('onload');
        element.removeAttribute('onerror');
      });

      this.hideFallback();
      this.showNotification('Safe mode enabled. Limited functionality available.', 'success');
    }

    private showReportModal() {
      const modal = this.container.querySelector('[data-report-modal]') as HTMLElement;
      if (modal) {
        modal.removeAttribute('hidden');

        // Focus management
        const firstInput = modal.querySelector('textarea') as HTMLElement;
        if (firstInput) {
          setTimeout(() => firstInput.focus(), 100);
        }
      }
    }

    private hideReportModal() {
      const modal = this.container.querySelector('[data-report-modal]') as HTMLElement;
      if (modal) {
        modal.setAttribute('hidden', '');
      }
    }

    private async submitErrorReport(formData: FormData) {
      try {
        this.showNotification('Submitting error report...', 'info');

        // In a real implementation, this would send to an error reporting service
        // For now, we'll simulate the submission
        await new Promise(resolve => setTimeout(resolve, 1000));

        const reportData = {
          description: formData.get('description'),
          email: formData.get('email'),
          includeTechnical: formData.get('include_technical') === 'on',
          errorId: this.fallbackElement.querySelector('[data-error-id]')?.textContent,
          timestamp: new Date().toISOString(),
          boundaryId: this.boundaryId
        };

        console.log('Error report submitted:', reportData);

        this.hideReportModal();
        this.showNotification('Error report submitted successfully. Thank you!', 'success');

      } catch (error) {
        console.error('Failed to submit error report:', error);
        this.showNotification('Failed to submit error report. Please try again.', 'error');
      }
    }

    private reportError(errorInfo: any) {
      // Automatic error reporting (constitutional compliance: local only)
      const reportData = {
        ...errorInfo,
        boundaryId: this.boundaryId,
        reportedAt: new Date().toISOString()
      };

      // Store error reports locally for analysis
      const existingReports = JSON.parse(localStorage.getItem('error-reports') || '[]');
      existingReports.push(reportData);

      // Keep only last 50 reports
      if (existingReports.length > 50) {
        existingReports.splice(0, existingReports.length - 50);
      }

      localStorage.setItem('error-reports', JSON.stringify(existingReports));

      console.log('Error reported locally:', reportData);
    }

    private generateErrorId(): string {
      return `err_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }

    private announceError(errorInfo: any) {
      const message = `Error occurred: ${errorInfo.message}. Fallback interface is now available.`;

      const announcer = document.createElement('div');
      announcer.setAttribute('aria-live', 'assertive');
      announcer.setAttribute('aria-atomic', 'true');
      announcer.className = 'sr-only';
      announcer.textContent = message;

      document.body.appendChild(announcer);
      setTimeout(() => document.body.removeChild(announcer), 3000);
    }

    private showNotification(message: string, type: 'success' | 'error' | 'warning' | 'info') {
      const notifications = this.container.querySelector('[data-notifications]') as HTMLElement;
      if (!notifications) return;

      const notification = document.createElement('div');
      notification.className = `notification notification-${type}`;
      notification.style.cssText = `
        padding: 12px 16px;
        background: ${type === 'success' ? 'hsl(var(--success))' :
                     type === 'error' ? 'hsl(var(--destructive))' :
                     type === 'warning' ? 'hsl(var(--warning))' : 'hsl(var(--info))'};
        color: ${type === 'success' ? 'hsl(var(--success-foreground))' :
                 type === 'error' ? 'hsl(var(--destructive-foreground))' :
                 type === 'warning' ? 'hsl(var(--warning-foreground))' : 'hsl(var(--info-foreground))'};
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        max-width: 300px;
        transform: translateX(100%);
        transition: transform 0.3s ease-out;
      `;
      notification.textContent = message;

      notifications.appendChild(notification);

      // Animate in
      setTimeout(() => {
        notification.style.transform = 'translateX(0)';
      }, 10);

      // Auto-remove after 5 seconds
      setTimeout(() => {
        notification.style.transform = 'translateX(100%)';
        setTimeout(() => {
          if (notification.parentNode) {
            notification.parentNode.removeChild(notification);
          }
        }, 300);
      }, 5000);
    }
  }

  // Initialize all error boundaries
  const initializeErrorBoundaries = () => {
    const boundaries = document.querySelectorAll('[data-error-boundary-id]');
    boundaries.forEach(boundary => {
      new ErrorBoundary(boundary as HTMLElement);
    });
  };

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeErrorBoundaries);
  } else {
    initializeErrorBoundaries();
  }

  // Screen reader only styles
  const srOnlyStyles = `
    .sr-only {
      position: absolute;
      width: 1px;
      height: 1px;
      padding: 0;
      margin: -1px;
      overflow: hidden;
      clip: rect(0, 0, 0, 0);
      white-space: nowrap;
      border: 0;
    }
  `;

  const styleSheet = document.createElement('style');
  styleSheet.textContent = srOnlyStyles;
  document.head.appendChild(styleSheet);
</script>