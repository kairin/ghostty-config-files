---
/**
 * Data Visualization Components
 * Constitutional compliance: Zero JavaScript by default, progressive enhancement
 * Features: Performance metrics, compliance dashboards, accessibility-first
 */

/**
 * @component DataVisualization
 * @summary A component for rendering various types of data visualizations.
 * @description This component can display different kinds of dashboards and metrics, such as performance scores, compliance status, project metrics, and timelines. It is designed with progressive enhancement and accessibility in mind, providing a data table as an alternative for screen readers.
 * @property {'performance' | 'compliance' | 'metrics' | 'timeline'} [type='performance'] - The type of visualization to render.
 * @property {any} [data] - The data object to be visualized. If not provided, sample data for the specified `type` will be used.
 * @property {string} [title] - The main title for the visualization container.
 * @property {string} [description] - A short description displayed below the title.
 * @property {string} [class] - Additional CSS classes to be applied to the component's root element.
 */
interface Props {
  type?: 'performance' | 'compliance' | 'metrics' | 'timeline';
  data?: any;
  title?: string;
  description?: string;
  class?: string;
}

const {
  type = 'performance',
  data,
  title,
  description,
  class: className
} = Astro.props;

// Sample data for different visualization types
const sampleData = {
  performance: {
    lighthouse: {
      performance: 98,
      accessibility: 100,
      bestPractices: 96,
      seo: 95
    },
    coreWebVitals: {
      fcp: 1.2,
      lcp: 1.8,
      cls: 0.05,
      fid: 85
    },
    buildMetrics: {
      buildTime: 24,
      jsBundle: 85,
      cssBundle: 15
    }
  },
  compliance: {
    constitutional: {
      uvFirst: 100,
      staticSite: 100,
      localCiCd: 100,
      componentUi: 100,
      zeroCost: 100
    },
    violations: 0,
    warnings: 2,
    lastAudit: '2025-09-20'
  },
  metrics: {
    documentation: {
      pages: 17,
      coverage: 100,
      generationTime: 0.34
    },
    testing: {
      passed: 45,
      failed: 0,
      coverage: 95
    }
  }
};

const vizData = data || sampleData[type as keyof typeof sampleData] || sampleData.performance;
const vizId = `viz-${Math.random().toString(36).slice(2, 11)}`;
---

<div class={`data-visualization ${className || ''}`}>
  <!-- Visualization Header -->
  {(title || description) && (
    <div class="viz-header">
      {title && <h3 class="viz-title">{title}</h3>}
      {description && <p class="viz-description">{description}</p>}
    </div>
  )}

  <!-- Visualization Content -->
  <div id={vizId} class="viz-container" role="img" aria-labelledby={`${vizId}-title`} aria-describedby={`${vizId}-desc`}>

    {type === 'performance' && (
      <div class="performance-dashboard">
        <!-- Lighthouse Scores -->
        <div class="lighthouse-scores">
          <h4 id={`${vizId}-title`} class="section-title">Lighthouse Scores</h4>
          <p id={`${vizId}-desc`} class="sr-only">
            Performance dashboard showing Lighthouse scores, Core Web Vitals, and build metrics
          </p>

          <div class="score-grid">
            {Object.entries(vizData.lighthouse || {}).map(([metric, score]) => {
              const numScore = Number(score);
              return (
                <div class="score-card">
                  <div class="score-circle" data-score={numScore}>
                    <svg width="80" height="80" viewBox="0 0 80 80" class="score-svg">
                      <circle cx="40" cy="40" r="35" fill="none" stroke="hsl(var(--muted))" stroke-width="6" />
                      <circle
                        cx="40"
                        cy="40"
                        r="35"
                        fill="none"
                        stroke={numScore >= 95 ? "hsl(var(--success))" : numScore >= 85 ? "hsl(var(--warning))" : "hsl(var(--destructive))"}
                        stroke-width="6"
                        stroke-dasharray={`${2 * Math.PI * 35}`}
                        stroke-dashoffset={`${2 * Math.PI * 35 * (1 - numScore / 100)}`}
                        stroke-linecap="round"
                        class="score-progress"
                      />
                    </svg>
                    <div class="score-value">
                      <span class="score-number">{numScore}</span>
                      <span class="score-unit">%</span>
                    </div>
                  </div>
                  <div class="score-label">{metric.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())}</div>
                </div>
              );
            })}
          </div>
        </div>

        <!-- Core Web Vitals -->
        <div class="core-vitals">
          <h4 class="section-title">Core Web Vitals</h4>
          <div class="vitals-grid">
            <div class="vital-metric">
              <div class="vital-label">First Contentful Paint</div>
              <div class="vital-value">{vizData.coreWebVitals?.fcp}s</div>
              <div class="vital-bar">
                <div class="vital-progress" style={`width: ${Math.min(100, (1.8 / vizData.coreWebVitals?.fcp) * 100)}%`}></div>
              </div>
              <div class="vital-target">Target: &lt;1.8s</div>
            </div>

            <div class="vital-metric">
              <div class="vital-label">Largest Contentful Paint</div>
              <div class="vital-value">{vizData.coreWebVitals?.lcp}s</div>
              <div class="vital-bar">
                <div class="vital-progress" style={`width: ${Math.min(100, (2.5 / vizData.coreWebVitals?.lcp) * 100)}%`}></div>
              </div>
              <div class="vital-target">Target: &lt;2.5s</div>
            </div>

            <div class="vital-metric">
              <div class="vital-label">Cumulative Layout Shift</div>
              <div class="vital-value">{vizData.coreWebVitals?.cls}</div>
              <div class="vital-bar">
                <div class="vital-progress" style={`width: ${Math.min(100, ((0.1 - vizData.coreWebVitals?.cls) / 0.1) * 100)}%`}></div>
              </div>
              <div class="vital-target">Target: &lt;0.1</div>
            </div>

            <div class="vital-metric">
              <div class="vital-label">First Input Delay</div>
              <div class="vital-value">{vizData.coreWebVitals?.fid}ms</div>
              <div class="vital-bar">
                <div class="vital-progress" style={`width: ${Math.min(100, ((100 - vizData.coreWebVitals?.fid) / 100) * 100)}%`}></div>
              </div>
              <div class="vital-target">Target: &lt;100ms</div>
            </div>
          </div>
        </div>

        <!-- Build Metrics -->
        <div class="build-metrics">
          <h4 class="section-title">Build Performance</h4>
          <div class="metrics-grid">
            <div class="metric-card">
              <div class="metric-icon">‚è±Ô∏è</div>
              <div class="metric-value">{vizData.buildMetrics?.buildTime}s</div>
              <div class="metric-label">Build Time</div>
              <div class="metric-target">Target: &lt;30s</div>
            </div>

            <div class="metric-card">
              <div class="metric-icon">üì¶</div>
              <div class="metric-value">{vizData.buildMetrics?.jsBundle}KB</div>
              <div class="metric-label">JS Bundle</div>
              <div class="metric-target">Target: &lt;100KB</div>
            </div>

            <div class="metric-card">
              <div class="metric-icon">üé®</div>
              <div class="metric-value">{vizData.buildMetrics?.cssBundle}KB</div>
              <div class="metric-label">CSS Bundle</div>
              <div class="metric-target">Target: &lt;20KB</div>
            </div>
          </div>
        </div>
      </div>
    )}

    {type === 'compliance' && (
      <div class="compliance-dashboard">
        <h4 id={`${vizId}-title`} class="section-title">Constitutional Compliance</h4>
        <p id={`${vizId}-desc`} class="sr-only">
          Constitutional compliance dashboard showing adherence to all five principles
        </p>

        <!-- Constitutional Principles -->
        <div class="principles-grid">
          {Object.entries(vizData.constitutional || {}).map(([principle, score]) => {
            const numScore = Number(score);
            return (
              <div class="principle-card">
                <div class="principle-header">
                  <div class="principle-icon">
                    {principle === 'uvFirst' && 'üêç'}
                    {principle === 'staticSite' && '‚ö°'}
                    {principle === 'localCiCd' && 'üèõÔ∏è'}
                    {principle === 'componentUi' && 'üé®'}
                    {principle === 'zeroCost' && 'üí∞'}
                  </div>
                  <div class="principle-score">
                    <span class="score-value">{numScore}%</span>
                    <div class="score-indicator" data-score={numScore}>
                      {numScore >= 95 ? '‚úÖ' : numScore >= 80 ? '‚ö†Ô∏è' : '‚ùå'}
                    </div>
                  </div>
                </div>
                <div class="principle-label">
                  {principle === 'uvFirst' && 'uv-First Python'}
                  {principle === 'staticSite' && 'Static Site Excellence'}
                  {principle === 'localCiCd' && 'Local CI/CD First'}
                  {principle === 'componentUi' && 'Component-Driven UI'}
                  {principle === 'zeroCost' && 'Zero-Cost Deployment'}
                </div>
                <div class="principle-bar">
                  <div class="principle-progress" style={`width: ${numScore}%`}></div>
                </div>
              </div>
            );
          })}
        </div>

        <!-- Compliance Summary -->
        <div class="compliance-summary">
          <div class="summary-grid">
            <div class="summary-metric">
              <div class="summary-value">{vizData.violations || 0}</div>
              <div class="summary-label">Violations</div>
              <div class="summary-indicator violations">
                {vizData.violations === 0 ? '‚úÖ' : '‚ùå'}
              </div>
            </div>

            <div class="summary-metric">
              <div class="summary-value">{vizData.warnings || 0}</div>
              <div class="summary-label">Warnings</div>
              <div class="summary-indicator warnings">
                {vizData.warnings === 0 ? '‚úÖ' : '‚ö†Ô∏è'}
              </div>
            </div>

            <div class="summary-metric">
              <div class="summary-value">{vizData.lastAudit || 'Never'}</div>
              <div class="summary-label">Last Audit</div>
              <div class="summary-indicator audit">üìÖ</div>
            </div>
          </div>
        </div>
      </div>
    )}

    {type === 'metrics' && (
      <div class="metrics-dashboard">
        <h4 id={`${vizId}-title`} class="section-title">Project Metrics</h4>
        <p id={`${vizId}-desc`} class="sr-only">
          Project metrics showing documentation coverage, test results, and system health
        </p>

        <!-- Documentation Metrics -->
        <div class="doc-metrics">
          <h5 class="subsection-title">Documentation</h5>
          <div class="doc-grid">
            <div class="doc-stat">
              <div class="stat-icon">üìö</div>
              <div class="stat-value">{vizData.documentation?.pages || 0}</div>
              <div class="stat-label">Pages Generated</div>
            </div>

            <div class="doc-stat">
              <div class="stat-icon">üìä</div>
              <div class="stat-value">{vizData.documentation?.coverage || 0}%</div>
              <div class="stat-label">Coverage</div>
            </div>

            <div class="doc-stat">
              <div class="stat-icon">‚ö°</div>
              <div class="stat-value">{vizData.documentation?.generationTime || 0}s</div>
              <div class="stat-label">Generation Time</div>
            </div>
          </div>
        </div>

        <!-- Testing Metrics -->
        <div class="test-metrics">
          <h5 class="subsection-title">Testing</h5>
          <div class="test-donut">
            <svg width="120" height="120" viewBox="0 0 120 120" class="donut-chart">
              <circle cx="60" cy="60" r="50" fill="none" stroke="hsl(var(--muted))" stroke-width="10" />
              <circle
                cx="60"
                cy="60"
                r="50"
                fill="none"
                stroke="hsl(var(--success))"
                stroke-width="10"
                stroke-dasharray={`${2 * Math.PI * 50}`}
                stroke-dashoffset={`${2 * Math.PI * 50 * (1 - (vizData.testing?.passed || 0) / ((vizData.testing?.passed || 0) + (vizData.testing?.failed || 0)))}`}
                stroke-linecap="round"
                class="donut-progress"
              />
            </svg>
            <div class="donut-center">
              <div class="donut-value">{((vizData.testing?.passed || 0) / ((vizData.testing?.passed || 0) + (vizData.testing?.failed || 0)) * 100).toFixed(0)}%</div>
              <div class="donut-label">Passing</div>
            </div>
          </div>

          <div class="test-stats">
            <div class="test-stat passed">
              <span class="stat-icon">‚úÖ</span>
              <span class="stat-number">{vizData.testing?.passed || 0}</span>
              <span class="stat-text">Passed</span>
            </div>

            <div class="test-stat failed">
              <span class="stat-icon">‚ùå</span>
              <span class="stat-number">{vizData.testing?.failed || 0}</span>
              <span class="stat-text">Failed</span>
            </div>

            <div class="test-stat coverage">
              <span class="stat-icon">üìä</span>
              <span class="stat-number">{vizData.testing?.coverage || 0}%</span>
              <span class="stat-text">Coverage</span>
            </div>
          </div>
        </div>
      </div>
    )}

    {type === 'timeline' && (
      <div class="timeline-dashboard">
        <h4 id={`${vizId}-title`} class="section-title">Implementation Timeline</h4>
        <p id={`${vizId}-desc`} class="sr-only">
          Project implementation timeline showing completed phases and milestones
        </p>

        <div class="timeline-container">
          <div class="timeline-line"></div>

          <div class="timeline-item completed">
            <div class="timeline-marker"></div>
            <div class="timeline-content">
              <div class="timeline-title">Phase 3.1-3.5: Foundation</div>
              <div class="timeline-description">Constitutional setup, dependencies, testing framework</div>
              <div class="timeline-date">Completed</div>
            </div>
          </div>

          <div class="timeline-item completed">
            <div class="timeline-marker"></div>
            <div class="timeline-content">
              <div class="timeline-title">Phase 3.6-3.8: Core Development</div>
              <div class="timeline-description">Astro implementation, shadcn/ui integration, Python automation</div>
              <div class="timeline-date">Completed</div>
            </div>
          </div>

          <div class="timeline-item completed">
            <div class="timeline-marker"></div>
            <div class="timeline-content">
              <div class="timeline-title">Phase 3.9-3.10: Infrastructure & Docs</div>
              <div class="timeline-description">Local CI/CD infrastructure, comprehensive documentation</div>
              <div class="timeline-date">Completed</div>
            </div>
          </div>

          <div class="timeline-item active">
            <div class="timeline-marker"></div>
            <div class="timeline-content">
              <div class="timeline-title">Phase 3.11: Advanced Features</div>
              <div class="timeline-description">Search, visualization, tutorials, accessibility, i18n</div>
              <div class="timeline-date">In Progress</div>
            </div>
          </div>

          <div class="timeline-item upcoming">
            <div class="timeline-marker"></div>
            <div class="timeline-content">
              <div class="timeline-title">Constitutional Certification</div>
              <div class="timeline-description">Final validation and compliance certification</div>
              <div class="timeline-date">Upcoming</div>
            </div>
          </div>
        </div>
      </div>
    )}
  </div>

  <!-- Data Table (Accessible Alternative) -->
  <details class="data-table-toggle">
    <summary class="table-summary">View data as table (accessible alternative)</summary>
    <div class="data-table-container">
      {type === 'performance' && (
        <table class="data-table">
          <caption>Performance Metrics Data</caption>
          <thead>
            <tr>
              <th scope="col">Metric</th>
              <th scope="col">Value</th>
              <th scope="col">Target</th>
              <th scope="col">Status</th>
            </tr>
          </thead>
          <tbody>
            {Object.entries(vizData.lighthouse || {}).map(([metric, score]) => {
              const numScore = Number(score);
              return (
                <tr>
                  <td>{metric.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())}</td>
                  <td>{numScore}%</td>
                  <td>‚â•95%</td>
                  <td>{numScore >= 95 ? '‚úÖ Pass' : '‚ö†Ô∏è Needs Improvement'}</td>
                </tr>
              );
            })}
          </tbody>
        </table>
      )}

      {type === 'compliance' && (
        <table class="data-table">
          <caption>Constitutional Compliance Data</caption>
          <thead>
            <tr>
              <th scope="col">Principle</th>
              <th scope="col">Score</th>
              <th scope="col">Status</th>
            </tr>
          </thead>
          <tbody>
            {Object.entries(vizData.constitutional || {}).map(([principle, score]) => {
              const numScore = Number(score);
              return (
                <tr>
                  <td>
                    {principle === 'uvFirst' && 'uv-First Python Management'}
                    {principle === 'staticSite' && 'Static Site Generation Excellence'}
                    {principle === 'localCiCd' && 'Local CI/CD First'}
                    {principle === 'componentUi' && 'Component-Driven UI Architecture'}
                    {principle === 'zeroCost' && 'Zero-Cost Deployment Excellence'}
                  </td>
                  <td>{numScore}%</td>
                  <td>{numScore >= 95 ? '‚úÖ Compliant' : numScore >= 80 ? '‚ö†Ô∏è Partial' : '‚ùå Non-Compliant'}</td>
                </tr>
              );
            })}
          </tbody>
        </table>
      )}
    </div>
  </details>
</div>

<style>
  .data-visualization {
    @apply w-full space-y-6;
  }

  .viz-header {
    @apply space-y-2;
  }

  .viz-title {
    @apply text-2xl font-bold text-foreground;
  }

  .viz-description {
    @apply text-muted-foreground;
  }

  .viz-container {
    @apply p-6 border border-input rounded-lg bg-card;
  }

  /* Performance Dashboard */
  .performance-dashboard {
    @apply space-y-8;
  }

  .section-title {
    @apply text-lg font-semibold text-foreground mb-4;
  }

  .score-grid {
    @apply grid grid-cols-2 lg:grid-cols-4 gap-6;
  }

  .score-card {
    @apply flex flex-col items-center space-y-3;
  }

  .score-circle {
    @apply relative;
  }

  .score-svg {
    @apply transform -rotate-90;
  }

  .score-progress {
    @apply transition-all duration-1000 ease-out;
  }

  .score-value {
    @apply absolute inset-0 flex items-center justify-center text-center;
  }

  .score-number {
    @apply text-2xl font-bold text-foreground;
  }

  .score-unit {
    @apply text-sm text-muted-foreground;
  }

  .score-label {
    @apply text-sm font-medium text-center text-foreground;
  }

  /* Core Web Vitals */
  .vitals-grid {
    @apply grid gap-4 md:grid-cols-2 lg:grid-cols-4;
  }

  .vital-metric {
    @apply space-y-2;
  }

  .vital-label {
    @apply text-sm font-medium text-foreground;
  }

  .vital-value {
    @apply text-xl font-bold text-foreground;
  }

  .vital-bar {
    @apply w-full h-2 bg-muted rounded-full overflow-hidden;
  }

  .vital-progress {
    @apply h-full bg-success rounded-full transition-all duration-1000 ease-out;
  }

  .vital-target {
    @apply text-xs text-muted-foreground;
  }

  /* Build Metrics */
  .metrics-grid {
    @apply grid gap-4 md:grid-cols-3;
  }

  .metric-card {
    @apply p-4 border border-input rounded-lg bg-background text-center space-y-2;
  }

  .metric-icon {
    @apply text-2xl;
  }

  .metric-value {
    @apply text-2xl font-bold text-foreground;
  }

  .metric-label {
    @apply text-sm font-medium text-foreground;
  }

  .metric-target {
    @apply text-xs text-muted-foreground;
  }

  /* Compliance Dashboard */
  .compliance-dashboard {
    @apply space-y-6;
  }

  .principles-grid {
    @apply grid gap-4 md:grid-cols-2 lg:grid-cols-3;
  }

  .principle-card {
    @apply p-4 border border-input rounded-lg bg-background space-y-3;
  }

  .principle-header {
    @apply flex justify-between items-center;
  }

  .principle-icon {
    @apply text-2xl;
  }

  .principle-score {
    @apply flex items-center gap-2;
  }

  .principle-score .score-value {
    @apply text-lg font-bold text-foreground;
  }

  .score-indicator {
    @apply text-lg;
  }

  .principle-label {
    @apply text-sm font-medium text-foreground;
  }

  .principle-bar {
    @apply w-full h-2 bg-muted rounded-full overflow-hidden;
  }

  .principle-progress {
    @apply h-full bg-success rounded-full transition-all duration-1000 ease-out;
  }

  /* Compliance Summary */
  .compliance-summary {
    @apply p-4 border border-input rounded-lg bg-muted/50;
  }

  .summary-grid {
    @apply grid grid-cols-3 gap-4;
  }

  .summary-metric {
    @apply text-center space-y-1;
  }

  .summary-value {
    @apply text-xl font-bold text-foreground;
  }

  .summary-label {
    @apply text-sm text-muted-foreground;
  }

  .summary-indicator {
    @apply text-lg;
  }

  /* Metrics Dashboard */
  .metrics-dashboard {
    @apply space-y-6;
  }

  .subsection-title {
    @apply text-base font-semibold text-foreground mb-3;
  }

  .doc-grid {
    @apply grid grid-cols-3 gap-4;
  }

  .doc-stat {
    @apply text-center space-y-2;
  }

  .stat-icon {
    @apply text-xl;
  }

  .stat-value {
    @apply text-lg font-bold text-foreground;
  }

  .stat-label {
    @apply text-sm text-muted-foreground;
  }

  /* Test Metrics */
  .test-metrics {
    @apply flex items-center gap-6;
  }

  .test-donut {
    @apply relative;
  }

  .donut-chart {
    @apply transform -rotate-90;
  }

  .donut-progress {
    @apply transition-all duration-1000 ease-out;
  }

  .donut-center {
    @apply absolute inset-0 flex flex-col items-center justify-center text-center;
  }

  .donut-value {
    @apply text-lg font-bold text-foreground;
  }

  .donut-label {
    @apply text-xs text-muted-foreground;
  }

  .test-stats {
    @apply space-y-3;
  }

  .test-stat {
    @apply flex items-center gap-2;
  }

  .test-stat .stat-number {
    @apply font-bold text-foreground;
  }

  .test-stat .stat-text {
    @apply text-sm text-muted-foreground;
  }

  /* Timeline Dashboard */
  .timeline-dashboard {
    @apply space-y-6;
  }

  .timeline-container {
    @apply relative space-y-6;
  }

  .timeline-line {
    @apply absolute left-4 top-0 bottom-0 w-0.5 bg-border;
  }

  .timeline-item {
    @apply relative flex items-start gap-4;
  }

  .timeline-marker {
    @apply relative z-10 w-8 h-8 rounded-full border-2 border-border bg-background;
  }

  .timeline-item.completed .timeline-marker {
    @apply border-success bg-success;
  }

  .timeline-item.active .timeline-marker {
    @apply border-primary bg-primary animate-pulse;
  }

  .timeline-item.upcoming .timeline-marker {
    @apply border-muted bg-muted;
  }

  .timeline-content {
    @apply flex-1 space-y-1;
  }

  .timeline-title {
    @apply font-semibold text-foreground;
  }

  .timeline-description {
    @apply text-sm text-muted-foreground;
  }

  .timeline-date {
    @apply text-xs text-muted-foreground;
  }

  /* Data Table */
  .data-table-toggle {
    @apply border border-input rounded-lg;
  }

  .table-summary {
    @apply p-3 cursor-pointer hover:bg-accent text-sm font-medium;
  }

  .data-table-container {
    @apply p-4 border-t border-input;
  }

  .data-table {
    @apply w-full border-collapse;
  }

  .data-table caption {
    @apply sr-only;
  }

  .data-table th,
  .data-table td {
    @apply p-2 text-left border-b border-input;
  }

  .data-table th {
    @apply font-semibold text-foreground bg-muted/50;
  }

  .data-table td {
    @apply text-foreground;
  }

  /* Responsive Design */
  @media (max-width: 768px) {
    .score-grid {
      @apply grid-cols-2;
    }

    .vitals-grid {
      @apply grid-cols-1;
    }

    .metrics-grid {
      @apply grid-cols-1;
    }

    .principles-grid {
      @apply grid-cols-1;
    }

    .test-metrics {
      @apply flex-col;
    }
  }

  /* Accessibility Enhancements */
  .sr-only {
    @apply absolute w-px h-px p-0 -m-px overflow-hidden whitespace-nowrap border-0;
    clip: rect(0, 0, 0, 0);
  }

  /* Animation Preferences */
  @media (prefers-reduced-motion: reduce) {
    .score-progress,
    .vital-progress,
    .principle-progress,
    .donut-progress {
      @apply transition-none;
    }

    .timeline-marker {
      @apply animate-none;
    }
  }

  /* High Contrast Mode */
  @media (prefers-contrast: high) {
    .viz-container,
    .metric-card,
    .principle-card {
      @apply border-2;
    }
  }
</style>

<script>
  // Progressive enhancement for data visualization
  class DataVisualization {
    private container: HTMLElement;
    private animationObserver?: IntersectionObserver;

    constructor(container: HTMLElement) {
      this.container = container;
      this.init();
    }

    private init() {
      // Animate visualizations when they come into view
      this.setupIntersectionObserver();

      // Add keyboard navigation for interactive elements
      this.setupKeyboardNavigation();

      // Initialize real-time updates if needed
      this.setupRealTimeUpdates();
    }

    private setupIntersectionObserver() {
      if ('IntersectionObserver' in window) {
        this.animationObserver = new IntersectionObserver(
          (entries) => {
            entries.forEach(entry => {
              if (entry.isIntersecting) {
                this.animateVisualization(entry.target as HTMLElement);
              }
            });
          },
          { threshold: 0.3 }
        );

        // Observe all visualization elements
        const vizElements = this.container.querySelectorAll('.score-progress, .vital-progress, .principle-progress, .donut-progress');
        vizElements.forEach(el => this.animationObserver!.observe(el));
      }
    }

    private animateVisualization(element: HTMLElement) {
      // Add animation classes or trigger CSS animations
      element.style.transitionDelay = `${Math.random() * 0.5}s`;

      // For SVG circles, animate stroke-dashoffset
      if (element.tagName === 'circle') {
        const currentOffset = element.style.strokeDashoffset;
        element.style.strokeDashoffset = element.getAttribute('stroke-dasharray') || '0';

        // Trigger reflow and animate
        element.offsetHeight;
        element.style.strokeDashoffset = currentOffset;
      }
    }

    private setupKeyboardNavigation() {
      // Add keyboard support for interactive elements
      const interactiveElements = this.container.querySelectorAll('[data-score], .timeline-marker');

      interactiveElements.forEach(element => {
        element.setAttribute('tabindex', '0');
        element.setAttribute('role', 'button');

        element.addEventListener('keydown', (e: Event) => {
          const keyboardEvent = e as KeyboardEvent;
          if (keyboardEvent.key === 'Enter' || keyboardEvent.key === ' ') {
            keyboardEvent.preventDefault();
            this.showDetailedInfo(element as HTMLElement);
          }
        });

        element.addEventListener('click', () => {
          this.showDetailedInfo(element as HTMLElement);
        });
      });
    }

    private setupRealTimeUpdates() {
      // Check for real-time data updates
      const updateInterval = this.container.dataset.updateInterval;
      if (updateInterval) {
        setInterval(() => {
          this.fetchUpdatedData();
        }, parseInt(updateInterval) * 1000);
      }
    }

    private showDetailedInfo(element: HTMLElement) {
      // Show detailed information in an accessible way
      const score = element.dataset.score;
      if (score) {
        const announcement = `Current score: ${score}%`;
        this.announceToScreenReader(announcement);
      }

      // Show tooltip or modal with detailed information
      this.showTooltip(element);
    }

    private announceToScreenReader(message: string) {
      const announcer = document.createElement('div');
      announcer.setAttribute('aria-live', 'polite');
      announcer.setAttribute('aria-atomic', 'true');
      announcer.className = 'sr-only';
      announcer.textContent = message;

      document.body.appendChild(announcer);
      setTimeout(() => document.body.removeChild(announcer), 1000);
    }

    private showTooltip(element: HTMLElement) {
      // Create and show tooltip with detailed information
      const existing = document.querySelector('.viz-tooltip');
      if (existing) existing.remove();

      const tooltip = document.createElement('div');
      tooltip.className = 'viz-tooltip';
      tooltip.innerHTML = this.getTooltipContent(element);

      document.body.appendChild(tooltip);
      this.positionTooltip(tooltip, element);

      // Remove tooltip on click outside or escape
      const removeTooltip = () => {
        tooltip.remove();
        document.removeEventListener('click', removeTooltip);
        document.removeEventListener('keydown', handleKeydown);
      };

      const handleKeydown = (e: KeyboardEvent) => {
        if (e.key === 'Escape') removeTooltip();
      };

      setTimeout(() => {
        document.addEventListener('click', removeTooltip);
        document.addEventListener('keydown', handleKeydown);
      }, 100);
    }

    private getTooltipContent(element: HTMLElement): string {
      const score = element.dataset.score;
      if (score) {
        const metric = element.closest('.score-card')?.querySelector('.score-label')?.textContent || 'Metric';
        return `
          <div class="tooltip-content">
            <h4>${metric}</h4>
            <p>Score: ${score}%</p>
            <p>Target: ‚â•95%</p>
            <p>Status: ${parseInt(score) >= 95 ? 'Excellent' : parseInt(score) >= 85 ? 'Good' : 'Needs Improvement'}</p>
          </div>
        `;
      }
      return '<div class="tooltip-content">No additional information available</div>';
    }

    private positionTooltip(tooltip: HTMLElement, anchor: HTMLElement) {
      const anchorRect = anchor.getBoundingClientRect();
      const tooltipRect = tooltip.getBoundingClientRect();

      let top = anchorRect.bottom + 10;
      let left = anchorRect.left + (anchorRect.width - tooltipRect.width) / 2;

      // Adjust if tooltip would go off screen
      if (left < 10) left = 10;
      if (left + tooltipRect.width > window.innerWidth - 10) {
        left = window.innerWidth - tooltipRect.width - 10;
      }
      if (top + tooltipRect.height > window.innerHeight - 10) {
        top = anchorRect.top - tooltipRect.height - 10;
      }

      tooltip.style.cssText = `
        position: fixed;
        top: ${top}px;
        left: ${left}px;
        z-index: 9999;
        background: hsl(var(--popover));
        border: 1px solid hsl(var(--border));
        border-radius: 8px;
        padding: 12px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        max-width: 250px;
      `;
    }

    private async fetchUpdatedData() {
      try {
        // In a real implementation, this would fetch updated metrics
        // For now, we'll simulate with random variations
        const scores = this.container.querySelectorAll('[data-score]');
        scores.forEach(element => {
          const currentScore = parseInt(element.getAttribute('data-score') || '0');
          const variation = (Math.random() - 0.5) * 2; // ¬±1 point variation
          const newScore = Math.max(0, Math.min(100, currentScore + variation));

          element.setAttribute('data-score', newScore.toFixed(0));
          this.updateVisualScore(element as HTMLElement, newScore);
        });
      } catch (error) {
        console.warn('Failed to fetch updated data:', error);
      }
    }

    private updateVisualScore(element: HTMLElement, score: number) {
      const circle = element.querySelector('.score-progress') as SVGCircleElement;
      if (circle) {
        const radius = parseFloat(circle.getAttribute('r') || '35');
        const circumference = 2 * Math.PI * radius;
        const offset = circumference * (1 - score / 100);

        circle.style.strokeDashoffset = offset.toString();
      }

      const scoreNumber = element.querySelector('.score-number');
      if (scoreNumber) {
        scoreNumber.textContent = score.toFixed(0);
      }
    }
  }

  // Initialize all data visualizations
  const initializeVisualizations = () => {
    const containers = document.querySelectorAll('.data-visualization');
    containers.forEach(container => {
      new DataVisualization(container as HTMLElement);
    });
  };

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeVisualizations);
  } else {
    initializeVisualizations();
  }
</script>