---
// Internationalization (i18n) Support - Constitutional Compliance Framework
// T061: Add internationalization (i18n) support
//
// Core Principles:
// 1. Constitutional compliance - Zero external dependencies
// 2. Performance first - Minimal i18n overhead
// 3. Accessibility first - RTL support, locale-aware formatting
// 4. Progressive enhancement - Works without JavaScript
// 5. Local storage - All translations stored locally

interface LocaleConfig {
  code: string;
  name: string;
  nativeName: string;
  direction: 'ltr' | 'rtl';
  region: string;
  flag: string;
}

interface TranslationKey {
  key: string;
  defaultValue: string;
  category: 'ui' | 'content' | 'error' | 'help';
  context?: string;
}

interface Props {
  currentLocale?: string;
  supportedLocales?: LocaleConfig[];
  translations?: Record<string, Record<string, string>>;
  constitutionalMode?: boolean;
  enableRTL?: boolean;
  enablePluralRules?: boolean;
  class?: string;
}

const {
  currentLocale = 'en-US',
  supportedLocales = [
    {
      code: 'en-US',
      name: 'English (US)',
      nativeName: 'English',
      direction: 'ltr',
      region: 'Americas',
      flag: '🇺🇸'
    },
    {
      code: 'en-GB',
      name: 'English (UK)',
      nativeName: 'English',
      direction: 'ltr',
      region: 'Europe',
      flag: '🇬🇧'
    },
    {
      code: 'es-ES',
      name: 'Spanish (Spain)',
      nativeName: 'Español',
      direction: 'ltr',
      region: 'Europe',
      flag: '🇪🇸'
    },
    {
      code: 'es-MX',
      name: 'Spanish (Mexico)',
      nativeName: 'Español',
      direction: 'ltr',
      region: 'Americas',
      flag: '🇲🇽'
    },
    {
      code: 'fr-FR',
      name: 'French (France)',
      nativeName: 'Français',
      direction: 'ltr',
      region: 'Europe',
      flag: '🇫🇷'
    },
    {
      code: 'de-DE',
      name: 'German (Germany)',
      nativeName: 'Deutsch',
      direction: 'ltr',
      region: 'Europe',
      flag: '🇩🇪'
    },
    {
      code: 'it-IT',
      name: 'Italian (Italy)',
      nativeName: 'Italiano',
      direction: 'ltr',
      region: 'Europe',
      flag: '🇮🇹'
    },
    {
      code: 'pt-BR',
      name: 'Portuguese (Brazil)',
      nativeName: 'Português',
      direction: 'ltr',
      region: 'Americas',
      flag: '🇧🇷'
    },
    {
      code: 'ru-RU',
      name: 'Russian (Russia)',
      nativeName: 'Русский',
      direction: 'ltr',
      region: 'Europe',
      flag: '🇷🇺'
    },
    {
      code: 'ja-JP',
      name: 'Japanese (Japan)',
      nativeName: '日本語',
      direction: 'ltr',
      region: 'Asia',
      flag: '🇯🇵'
    },
    {
      code: 'ko-KR',
      name: 'Korean (Korea)',
      nativeName: '한국어',
      direction: 'ltr',
      region: 'Asia',
      flag: '🇰🇷'
    },
    {
      code: 'zh-CN',
      name: 'Chinese (Simplified)',
      nativeName: '简体中文',
      direction: 'ltr',
      region: 'Asia',
      flag: '🇨🇳'
    },
    {
      code: 'zh-TW',
      name: 'Chinese (Traditional)',
      nativeName: '繁體中文',
      direction: 'ltr',
      region: 'Asia',
      flag: '🇹🇼'
    },
    {
      code: 'ar-SA',
      name: 'Arabic (Saudi Arabia)',
      nativeName: 'العربية',
      direction: 'rtl',
      region: 'Middle East',
      flag: '🇸🇦'
    },
    {
      code: 'he-IL',
      name: 'Hebrew (Israel)',
      nativeName: 'עברית',
      direction: 'rtl',
      region: 'Middle East',
      flag: '🇮🇱'
    },
    {
      code: 'hi-IN',
      name: 'Hindi (India)',
      nativeName: 'हिन्दी',
      direction: 'ltr',
      region: 'Asia',
      flag: '🇮🇳'
    }
  ],
  translations = {
    'en-US': {
      'app.title': 'Ghostty Configuration Files',
      'app.description': 'Comprehensive terminal environment setup',
      'nav.home': 'Home',
      'nav.config': 'Configuration',
      'nav.themes': 'Themes',
      'nav.keybindings': 'Keybindings',
      'nav.about': 'About',
      'config.title': 'Terminal Configuration',
      'config.performance': 'Performance Settings',
      'config.appearance': 'Appearance Settings',
      'themes.title': 'Terminal Themes',
      'themes.light': 'Light Themes',
      'themes.dark': 'Dark Themes',
      'keys.title': 'Keyboard Shortcuts',
      'keys.global': 'Global Shortcuts',
      'keys.terminal': 'Terminal Shortcuts',
      'error.title': 'Error',
      'error.notFound': 'Page not found',
      'error.serverError': 'Server error',
      'help.title': 'Help & Documentation',
      'help.gettingStarted': 'Getting Started',
      'help.troubleshooting': 'Troubleshooting',
      'common.save': 'Save',
      'common.cancel': 'Cancel',
      'common.delete': 'Delete',
      'common.edit': 'Edit',
      'common.copy': 'Copy',
      'common.paste': 'Paste',
      'common.reset': 'Reset',
      'common.apply': 'Apply',
      'common.loading': 'Loading...',
      'common.success': 'Success',
      'common.error': 'Error',
      'common.warning': 'Warning',
      'accessibility.skipToContent': 'Skip to main content',
      'accessibility.skipToNav': 'Skip to navigation',
      'accessibility.menuButton': 'Open menu',
      'accessibility.closeDialog': 'Close dialog',
      'accessibility.previousPage': 'Previous page',
      'accessibility.nextPage': 'Next page',
      'i18n.currentLanguage': 'Current language',
      'i18n.selectLanguage': 'Select language',
      'i18n.languageChanged': 'Language changed to {language}',
      'i18n.translationMissing': 'Translation missing for key: {key}'
    },
    'es-ES': {
      'app.title': 'Archivos de Configuración de Ghostty',
      'app.description': 'Configuración completa del entorno de terminal',
      'nav.home': 'Inicio',
      'nav.config': 'Configuración',
      'nav.themes': 'Temas',
      'nav.keybindings': 'Atajos de Teclado',
      'nav.about': 'Acerca de',
      'config.title': 'Configuración del Terminal',
      'config.performance': 'Configuración de Rendimiento',
      'config.appearance': 'Configuración de Apariencia',
      'themes.title': 'Temas del Terminal',
      'themes.light': 'Temas Claros',
      'themes.dark': 'Temas Oscuros',
      'keys.title': 'Atajos de Teclado',
      'keys.global': 'Atajos Globales',
      'keys.terminal': 'Atajos del Terminal',
      'error.title': 'Error',
      'error.notFound': 'Página no encontrada',
      'error.serverError': 'Error del servidor',
      'help.title': 'Ayuda y Documentación',
      'help.gettingStarted': 'Primeros Pasos',
      'help.troubleshooting': 'Solución de Problemas',
      'common.save': 'Guardar',
      'common.cancel': 'Cancelar',
      'common.delete': 'Eliminar',
      'common.edit': 'Editar',
      'common.copy': 'Copiar',
      'common.paste': 'Pegar',
      'common.reset': 'Restablecer',
      'common.apply': 'Aplicar',
      'common.loading': 'Cargando...',
      'common.success': 'Éxito',
      'common.error': 'Error',
      'common.warning': 'Advertencia',
      'accessibility.skipToContent': 'Saltar al contenido principal',
      'accessibility.skipToNav': 'Saltar a la navegación',
      'accessibility.menuButton': 'Abrir menú',
      'accessibility.closeDialog': 'Cerrar diálogo',
      'accessibility.previousPage': 'Página anterior',
      'accessibility.nextPage': 'Página siguiente',
      'i18n.currentLanguage': 'Idioma actual',
      'i18n.selectLanguage': 'Seleccionar idioma',
      'i18n.languageChanged': 'Idioma cambiado a {language}',
      'i18n.translationMissing': 'Traducción faltante para la clave: {key}'
    },
    'fr-FR': {
      'app.title': 'Fichiers de Configuration Ghostty',
      'app.description': 'Configuration complète de l\'environnement terminal',
      'nav.home': 'Accueil',
      'nav.config': 'Configuration',
      'nav.themes': 'Thèmes',
      'nav.keybindings': 'Raccourcis Clavier',
      'nav.about': 'À Propos',
      'config.title': 'Configuration du Terminal',
      'config.performance': 'Paramètres de Performance',
      'config.appearance': 'Paramètres d\'Apparence',
      'themes.title': 'Thèmes du Terminal',
      'themes.light': 'Thèmes Clairs',
      'themes.dark': 'Thèmes Sombres',
      'keys.title': 'Raccourcis Clavier',
      'keys.global': 'Raccourcis Globaux',
      'keys.terminal': 'Raccourcis du Terminal',
      'error.title': 'Erreur',
      'error.notFound': 'Page non trouvée',
      'error.serverError': 'Erreur du serveur',
      'help.title': 'Aide et Documentation',
      'help.gettingStarted': 'Démarrage',
      'help.troubleshooting': 'Dépannage',
      'common.save': 'Enregistrer',
      'common.cancel': 'Annuler',
      'common.delete': 'Supprimer',
      'common.edit': 'Modifier',
      'common.copy': 'Copier',
      'common.paste': 'Coller',
      'common.reset': 'Réinitialiser',
      'common.apply': 'Appliquer',
      'common.loading': 'Chargement...',
      'common.success': 'Succès',
      'common.error': 'Erreur',
      'common.warning': 'Avertissement',
      'accessibility.skipToContent': 'Aller au contenu principal',
      'accessibility.skipToNav': 'Aller à la navigation',
      'accessibility.menuButton': 'Ouvrir le menu',
      'accessibility.closeDialog': 'Fermer la boîte de dialogue',
      'accessibility.previousPage': 'Page précédente',
      'accessibility.nextPage': 'Page suivante',
      'i18n.currentLanguage': 'Langue actuelle',
      'i18n.selectLanguage': 'Sélectionner la langue',
      'i18n.languageChanged': 'Langue changée en {language}',
      'i18n.translationMissing': 'Traduction manquante pour la clé : {key}'
    },
    'ar-SA': {
      'app.title': 'ملفات تكوين Ghostty',
      'app.description': 'إعداد شامل لبيئة الطرفية',
      'nav.home': 'الرئيسية',
      'nav.config': 'التكوين',
      'nav.themes': 'السمات',
      'nav.keybindings': 'اختصارات لوحة المفاتيح',
      'nav.about': 'حول',
      'config.title': 'تكوين الطرفية',
      'config.performance': 'إعدادات الأداء',
      'config.appearance': 'إعدادات المظهر',
      'themes.title': 'سمات الطرفية',
      'themes.light': 'السمات الفاتحة',
      'themes.dark': 'السمات الداكنة',
      'keys.title': 'اختصارات لوحة المفاتيح',
      'keys.global': 'الاختصارات العامة',
      'keys.terminal': 'اختصارات الطرفية',
      'error.title': 'خطأ',
      'error.notFound': 'الصفحة غير موجودة',
      'error.serverError': 'خطأ في الخادم',
      'help.title': 'المساعدة والوثائق',
      'help.gettingStarted': 'البدء',
      'help.troubleshooting': 'استكشاف الأخطاء وإصلاحها',
      'common.save': 'حفظ',
      'common.cancel': 'إلغاء',
      'common.delete': 'حذف',
      'common.edit': 'تحرير',
      'common.copy': 'نسخ',
      'common.paste': 'لصق',
      'common.reset': 'إعادة تعيين',
      'common.apply': 'تطبيق',
      'common.loading': 'جاري التحميل...',
      'common.success': 'نجح',
      'common.error': 'خطأ',
      'common.warning': 'تحذير',
      'accessibility.skipToContent': 'الانتقال إلى المحتوى الرئيسي',
      'accessibility.skipToNav': 'الانتقال إلى التنقل',
      'accessibility.menuButton': 'فتح القائمة',
      'accessibility.closeDialog': 'إغلاق الحوار',
      'accessibility.previousPage': 'الصفحة السابقة',
      'accessibility.nextPage': 'الصفحة التالية',
      'i18n.currentLanguage': 'اللغة الحالية',
      'i18n.selectLanguage': 'اختيار اللغة',
      'i18n.languageChanged': 'تم تغيير اللغة إلى {language}',
      'i18n.translationMissing': 'ترجمة مفقودة للمفتاح: {key}'
    }
  },
  constitutionalMode = true,
  enableRTL = true,
  enablePluralRules = true,
  class: className = ''
} = Astro.props;

// Get current locale configuration
const currentLocaleConfig = supportedLocales.find(locale => locale.code === currentLocale) || supportedLocales[0];
const isRTL = currentLocaleConfig.direction === 'rtl';

// Get current translations
const currentTranslations = translations[currentLocale] || translations['en-US'];

// Translation helper function
function t(key: string, params?: Record<string, string>): string {
  let translation = currentTranslations[key] || translations['en-US'][key] || key;

  // Replace parameters
  if (params) {
    Object.entries(params).forEach(([param, value]) => {
      translation = translation.replace(`{${param}}`, value);
    });
  }

  return translation;
}

// Format date/time according to locale
function formatDateTime(date: Date, options?: Intl.DateTimeFormatOptions): string {
  return new Intl.DateTimeFormat(currentLocale, options).format(date);
}

// Format numbers according to locale
function formatNumber(number: number, options?: Intl.NumberFormatOptions): string {
  return new Intl.NumberFormat(currentLocale, options).format(number);
}

// Group locales by region
const localesByRegion = supportedLocales.reduce((acc, locale) => {
  if (!acc[locale.region]) {
    acc[locale.region] = [];
  }
  acc[locale.region].push(locale);
  return acc;
}, {} as Record<string, LocaleConfig[]>);

// Calculate translation completion percentage
const baseTranslations = translations['en-US'];
const currentTranslationKeys = Object.keys(currentTranslations);
const baseTranslationKeys = Object.keys(baseTranslations);
const completionPercentage = Math.round((currentTranslationKeys.length / baseTranslationKeys.length) * 100);
---

<div
  class={`i18n-support ${className} ${isRTL ? 'rtl' : 'ltr'}`}
  data-locale={currentLocale}
  data-direction={currentLocaleConfig.direction}
  data-constitutional-mode={constitutionalMode}
  dir={currentLocaleConfig.direction}
  lang={currentLocale}
  role="region"
  aria-labelledby="i18n-heading"
>
  <!-- Internationalization Header -->
  <header class="i18n-header mb-8">
    <h2 id="i18n-heading" class="text-2xl font-bold mb-4 text-gray-900 dark:text-white">
      {t('i18n.title', { title: 'Internationalization Support' })}
    </h2>
    <p class="text-gray-600 dark:text-gray-300 mb-6">
      {t('i18n.description', { description: 'Multi-language support with constitutional compliance and accessibility' })}
    </p>

    <!-- Current Language Status -->
    <div class="current-language-status mb-6 p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-800">
      <div class="flex items-center justify-between">
        <div class="flex items-center">
          <span class="text-2xl mr-3" role="img" aria-label={`${currentLocaleConfig.name} flag`}>
            {currentLocaleConfig.flag}
          </span>
          <div>
            <div class="font-medium text-blue-900 dark:text-blue-200">
              {t('i18n.currentLanguage')}: {currentLocaleConfig.nativeName}
            </div>
            <div class="text-sm text-blue-700 dark:text-blue-300">
              {currentLocaleConfig.name} • {currentLocaleConfig.direction.toUpperCase()} • {completionPercentage}% {t('i18n.translated', { translated: 'translated' })}
            </div>
          </div>
        </div>

        <div class="text-right">
          <div class="text-sm text-blue-700 dark:text-blue-300">
            {t('i18n.lastUpdate', { lastUpdate: 'Last updated' })}
          </div>
          <div class="font-medium text-blue-900 dark:text-blue-200">
            {formatDateTime(new Date(), { dateStyle: 'short', timeStyle: 'short' })}
          </div>
        </div>
      </div>
    </div>
  </header>

  <!-- Language Selector -->
  <section class="language-selector mb-8" aria-labelledby="selector-heading">
    <h3 id="selector-heading" class="text-lg font-semibold mb-4 text-gray-800 dark:text-gray-200">
      {t('i18n.selectLanguage')}
    </h3>

    <div class="selector-container">
      <!-- Quick Language Switcher -->
      <div class="quick-switcher mb-6">
        <label for="quick-language-select" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
          {t('i18n.quickSelect', { quickSelect: 'Quick Language Selection' })}
        </label>
        <select
          id="quick-language-select"
          class="language-select w-full max-w-xs px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          data-current-locale={currentLocale}
          aria-describedby="language-select-description"
        >
          {supportedLocales.map((locale) => (
            <option
              value={locale.code}
              selected={locale.code === currentLocale}
              data-direction={locale.direction}
            >
              {locale.flag} {locale.nativeName} ({locale.name})
            </option>
          ))}
        </select>
        <div id="language-select-description" class="text-xs text-gray-500 dark:text-gray-400 mt-1">
          {t('i18n.selectDescription', { description: 'Select your preferred language from the dropdown' })}
        </div>
      </div>

      <!-- Regional Language Grid -->
      <div class="regional-grid space-y-6">
        {Object.entries(localesByRegion).map(([region, locales]) => (
          <div class="region-group">
            <h4 class="text-md font-medium text-gray-800 dark:text-gray-200 mb-3">
              {t(`region.${region.toLowerCase().replace(' ', '')}`, { region })}
            </h4>

            <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3">
              {locales.map((locale) => (
                <button
                  type="button"
                  class={`language-option p-3 rounded-lg border transition-all focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-900 ${
                    locale.code === currentLocale
                      ? 'bg-blue-50 border-blue-300 dark:bg-blue-900/20 dark:border-blue-700'
                      : 'bg-white border-gray-200 hover:bg-gray-50 dark:bg-gray-800 dark:border-gray-700 dark:hover:bg-gray-700'
                  }`}
                  data-locale={locale.code}
                  data-direction={locale.direction}
                  aria-pressed={locale.code === currentLocale}
                  aria-describedby={`${locale.code}-description`}
                >
                  <div class="flex items-center">
                    <span class="text-xl mr-3" role="img" aria-label={`${locale.name} flag`}>
                      {locale.flag}
                    </span>
                    <div class="text-left">
                      <div class="font-medium text-gray-900 dark:text-white text-sm">
                        {locale.nativeName}
                      </div>
                      <div class="text-xs text-gray-600 dark:text-gray-400">
                        {locale.name}
                      </div>
                    </div>
                  </div>

                  <div id={`${locale.code}-description`} class="sr-only">
                    {t('i18n.languageOption', {
                      language: locale.nativeName,
                      region: locale.region,
                      direction: locale.direction
                    })}. {locale.code === currentLocale ? t('i18n.currentlySelected', { selected: 'Currently selected' }) : ''}
                  </div>
                </button>
              ))}
            </div>
          </div>
        ))}
      </div>
    </div>
  </section>

  <!-- Translation Status -->
  <section class="translation-status mb-8" aria-labelledby="status-heading">
    <h3 id="status-heading" class="text-lg font-semibold mb-4 text-gray-800 dark:text-gray-200">
      {t('i18n.translationStatus', { status: 'Translation Status' })}
    </h3>

    <div class="status-grid grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
      <!-- Completion Status -->
      <div class="status-card p-4 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700">
        <div class="flex items-center justify-between mb-3">
          <h4 class="font-medium text-gray-900 dark:text-white">
            {t('i18n.completion', { completion: 'Completion' })}
          </h4>
          <span class={`text-2xl ${completionPercentage >= 90 ? 'text-green-600' : completionPercentage >= 70 ? 'text-yellow-600' : 'text-red-600'}`}>
            {completionPercentage}%
          </span>
        </div>

        <div class="progress-bar w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2 mb-3">
          <div
            class={`h-2 rounded-full transition-all duration-300 ${
              completionPercentage >= 90 ? 'bg-green-600' : completionPercentage >= 70 ? 'bg-yellow-600' : 'bg-red-600'
            }`}
            style={`width: ${completionPercentage}%`}
            role="progressbar"
            aria-valuenow={completionPercentage}
            aria-valuemin="0"
            aria-valuemax="100"
            aria-label={t('i18n.translationProgress', { progress: 'Translation progress' })}
          ></div>
        </div>

        <div class="text-sm text-gray-600 dark:text-gray-400">
          {currentTranslationKeys.length} / {baseTranslationKeys.length} {t('i18n.keysTranslated', { keys: 'keys translated' })}
        </div>
      </div>

      <!-- RTL Support -->
      <div class="status-card p-4 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700">
        <div class="flex items-center justify-between mb-3">
          <h4 class="font-medium text-gray-900 dark:text-white">
            {t('i18n.rtlSupport', { rtl: 'RTL Support' })}
          </h4>
          <span class={`text-2xl ${enableRTL ? 'text-green-600' : 'text-gray-400'}`}>
            {enableRTL ? '✓' : '○'}
          </span>
        </div>

        <div class="text-sm text-gray-600 dark:text-gray-400">
          {enableRTL
            ? t('i18n.rtlEnabled', { enabled: 'Right-to-left languages supported' })
            : t('i18n.rtlDisabled', { disabled: 'RTL support disabled' })
          }
        </div>

        {isRTL && (
          <div class="mt-2 text-xs text-blue-600 dark:text-blue-400">
            {t('i18n.currentlyRTL', { currently: 'Currently using RTL layout' })}
          </div>
        )}
      </div>

      <!-- Performance Impact -->
      <div class="status-card p-4 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700">
        <div class="flex items-center justify-between mb-3">
          <h4 class="font-medium text-gray-900 dark:text-white">
            {t('i18n.performance', { performance: 'Performance' })}
          </h4>
          <span class="text-2xl text-green-600">
            &lt;2KB
          </span>
        </div>

        <div class="text-sm text-gray-600 dark:text-gray-400">
          {t('i18n.performanceDescription', { description: 'Minimal overhead, local storage only' })}
        </div>
      </div>
    </div>
  </section>

  <!-- Locale Features Demo -->
  <section class="locale-features mb-8" aria-labelledby="features-heading">
    <h3 id="features-heading" class="text-lg font-semibold mb-4 text-gray-800 dark:text-gray-200">
      {t('i18n.localeFeatures', { features: 'Locale-Specific Features' })}
    </h3>

    <div class="features-grid grid grid-cols-1 md:grid-cols-2 gap-6">
      <!-- Date/Time Formatting -->
      <div class="feature-demo p-4 bg-gray-50 dark:bg-gray-900/50 rounded-lg border border-gray-200 dark:border-gray-700">
        <h4 class="font-medium text-gray-900 dark:text-white mb-3">
          {t('i18n.dateTimeFormatting', { formatting: 'Date & Time Formatting' })}
        </h4>

        <div class="space-y-2 text-sm">
          <div class="flex justify-between">
            <span class="text-gray-600 dark:text-gray-400">{t('i18n.currentTime', { time: 'Current time' })}:</span>
            <span class="font-mono text-gray-900 dark:text-white">
              {formatDateTime(new Date(), { timeStyle: 'medium' })}
            </span>
          </div>
          <div class="flex justify-between">
            <span class="text-gray-600 dark:text-gray-400">{t('i18n.currentDate', { date: 'Current date' })}:</span>
            <span class="font-mono text-gray-900 dark:text-white">
              {formatDateTime(new Date(), { dateStyle: 'full' })}
            </span>
          </div>
          <div class="flex justify-between">
            <span class="text-gray-600 dark:text-gray-400">{t('i18n.shortDate', { short: 'Short format' })}:</span>
            <span class="font-mono text-gray-900 dark:text-white">
              {formatDateTime(new Date(), { dateStyle: 'short' })}
            </span>
          </div>
        </div>
      </div>

      <!-- Number Formatting -->
      <div class="feature-demo p-4 bg-gray-50 dark:bg-gray-900/50 rounded-lg border border-gray-200 dark:border-gray-700">
        <h4 class="font-medium text-gray-900 dark:text-white mb-3">
          {t('i18n.numberFormatting', { formatting: 'Number Formatting' })}
        </h4>

        <div class="space-y-2 text-sm">
          <div class="flex justify-between">
            <span class="text-gray-600 dark:text-gray-400">{t('i18n.integer', { integer: 'Integer' })}:</span>
            <span class="font-mono text-gray-900 dark:text-white">
              {formatNumber(1234567)}
            </span>
          </div>
          <div class="flex justify-between">
            <span class="text-gray-600 dark:text-gray-400">{t('i18n.decimal', { decimal: 'Decimal' })}:</span>
            <span class="font-mono text-gray-900 dark:text-white">
              {formatNumber(1234.56, { minimumFractionDigits: 2 })}
            </span>
          </div>
          <div class="flex justify-between">
            <span class="text-gray-600 dark:text-gray-400">{t('i18n.percentage', { percentage: 'Percentage' })}:</span>
            <span class="font-mono text-gray-900 dark:text-white">
              {formatNumber(0.85, { style: 'percent' })}
            </span>
          </div>
          <div class="flex justify-between">
            <span class="text-gray-600 dark:text-gray-400">{t('i18n.currency', { currency: 'Currency' })}:</span>
            <span class="font-mono text-gray-900 dark:text-white">
              {formatNumber(29.99, { style: 'currency', currency: 'USD' })}
            </span>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- Constitutional Compliance -->
  {constitutionalMode && (
    <section class="constitutional-compliance p-6 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-800" aria-labelledby="compliance-heading">
      <h3 id="compliance-heading" class="text-lg font-semibold mb-4 text-blue-900 dark:text-blue-200">
        {t('i18n.constitutionalCompliance', { compliance: 'Constitutional Compliance' })}
      </h3>

      <div class="compliance-checklist space-y-3">
        <div class="compliance-item flex items-center">
          <span class="w-5 h-5 rounded-full bg-green-400 flex items-center justify-center mr-3">
            <span class="text-white text-xs">✓</span>
          </span>
          <span class="text-sm text-blue-800 dark:text-blue-200">
            {t('i18n.noExternalDependencies', { dependencies: 'Zero external translation services - All translations stored locally' })}
          </span>
        </div>

        <div class="compliance-item flex items-center">
          <span class="w-5 h-5 rounded-full bg-green-400 flex items-center justify-center mr-3">
            <span class="text-white text-xs">✓</span>
          </span>
          <span class="text-sm text-blue-800 dark:text-blue-200">
            {t('i18n.performanceFirst', { performance: 'Performance first - Minimal i18n overhead (<2KB)' })}
          </span>
        </div>

        <div class="compliance-item flex items-center">
          <span class="w-5 h-5 rounded-full bg-green-400 flex items-center justify-center mr-3">
            <span class="text-white text-xs">✓</span>
          </span>
          <span class="text-sm text-blue-800 dark:text-blue-200">
            {t('i18n.accessibilityCompliant', { accessibility: 'Full accessibility compliance with RTL and screen reader support' })}
          </span>
        </div>

        <div class="compliance-item flex items-center">
          <span class="w-5 h-5 rounded-full bg-green-400 flex items-center justify-center mr-3">
            <span class="text-white text-xs">✓</span>
          </span>
          <span class="text-sm text-blue-800 dark:text-blue-200">
            {t('i18n.progressiveEnhancement', { enhancement: 'Progressive enhancement - Works without JavaScript' })}
          </span>
        </div>

        <div class="compliance-item flex items-center">
          <span class="w-5 h-5 rounded-full bg-green-400 flex items-center justify-center mr-3">
            <span class="text-white text-xs">✓</span>
          </span>
          <span class="text-sm text-blue-800 dark:text-blue-200">
            {t('i18n.privacyFirst', { privacy: 'Privacy first - No analytics or tracking across languages' })}
          </span>
        </div>
      </div>
    </section>
  )}

  <!-- Live Translation Test -->
  <section class="translation-test mt-8" aria-labelledby="test-heading">
    <h3 id="test-heading" class="text-lg font-semibold mb-4 text-gray-800 dark:text-gray-200">
      {t('i18n.liveTranslationTest', { test: 'Live Translation Test' })}
    </h3>

    <div class="test-container p-4 bg-gray-50 dark:bg-gray-900/50 rounded-lg border border-gray-200 dark:border-gray-700">
      <div class="test-input mb-4">
        <label for="translation-key" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
          {t('i18n.enterTranslationKey', { enter: 'Enter translation key to test' })}:
        </label>
        <input
          type="text"
          id="translation-key"
          placeholder="e.g., common.save"
          class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
        />
      </div>

      <div class="test-output p-3 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded text-sm" aria-live="polite">
        {t('i18n.testInstructions', { instructions: 'Type a translation key above to see its value in the current language' })}
      </div>
    </div>
  </section>

  <!-- Announcements for screen readers -->
  <div class="sr-only" aria-live="polite" id="i18n-announcements">
    {t('i18n.initialized', { initialized: 'Internationalization system initialized' })}
  </div>

  <div class="sr-only" aria-live="assertive" id="i18n-alerts">
    <!-- Dynamic alerts will be announced here -->
  </div>
</div>

<style>
  .i18n-support {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
  }

  /* RTL Support */
  .i18n-support.rtl {
    direction: rtl;
    text-align: right;
  }

  .i18n-support.rtl .flex {
    flex-direction: row-reverse;
  }

  .i18n-support.rtl .text-left {
    text-align: right;
  }

  .i18n-support.rtl .text-right {
    text-align: left;
  }

  /* Language option transitions */
  .language-option {
    transition: all 0.2s ease-in-out;
  }

  .language-option:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
  }

  /* Progress bar animation */
  .progress-bar > div {
    transition: width 0.5s ease-in-out;
  }

  /* Feature demo cards */
  .feature-demo {
    transition: all 0.2s ease-in-out;
  }

  .feature-demo:hover {
    background-color: rgba(249, 250, 251, 0.8);
  }

  .dark .feature-demo:hover {
    background-color: rgba(17, 24, 39, 0.8);
  }

  /* High contrast mode support */
  @media (prefers-contrast: high) {
    .language-option {
      border-width: 2px;
    }

    .status-card {
      border-width: 2px;
    }

    .feature-demo {
      border-width: 2px;
    }
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .language-option {
      transition: none;
    }

    .language-option:hover {
      transform: none;
    }

    .progress-bar > div {
      transition: none;
    }

    .feature-demo {
      transition: none;
    }
  }

  /* Large text support */
  @media (min-resolution: 120dpi) and (min-width: 1200px) {
    .i18n-support {
      font-size: 1.125rem;
    }
  }

  /* Ensure minimum touch targets on mobile */
  @media (max-width: 768px) {
    .language-option {
      min-height: 60px;
    }

    .language-select {
      min-height: 44px;
    }
  }

  /* RTL-specific adjustments */
  .rtl .grid {
    direction: ltr; /* Keep grid layout LTR */
  }

  .rtl .grid > * {
    direction: rtl; /* But content RTL */
  }

  /* Focus indicators */
  .language-option:focus {
    outline: 2px solid #3b82f6;
    outline-offset: 2px;
  }

  .language-select:focus {
    outline: 2px solid #3b82f6;
    outline-offset: 2px;
  }
</style>

<script>
class InternationalizationSupport {
  constructor() {
    this.currentLocale = 'en-US';
    this.translations = new Map();
    this.supportedLocales = new Map();
    this.formatters = new Map();

    this.init();
  }

  init() {
    // Only initialize if JavaScript is available (progressive enhancement)
    if (typeof window === 'undefined') return;

    this.loadLocaleData();
    this.setupLanguageSelector();
    this.setupTranslationTest();
    this.detectBrowserLocale();
    this.setupFormatters();
    this.announceInitialization();
  }

  loadLocaleData() {
    // Load locale configuration from DOM
    const container = document.querySelector('.i18n-support');
    if (container) {
      this.currentLocale = container.dataset.locale || 'en-US';

      // Load supported locales from language options
      const languageOptions = document.querySelectorAll('.language-option');
      languageOptions.forEach(option => {
        const locale = option.dataset.locale;
        const direction = option.dataset.direction;
        const flag = option.querySelector('[role="img"]').textContent;
        const nativeName = option.querySelector('.font-medium').textContent;
        const name = option.querySelector('.text-xs').textContent;

        this.supportedLocales.set(locale, {
          code: locale,
          direction,
          flag,
          nativeName,
          name
        });
      });
    }
  }

  setupLanguageSelector() {
    // Quick language selector
    const quickSelect = document.getElementById('quick-language-select');
    if (quickSelect) {
      quickSelect.addEventListener('change', (e) => {
        this.changeLanguage(e.target.value);
      });
    }

    // Language option buttons
    const languageOptions = document.querySelectorAll('.language-option');
    languageOptions.forEach(option => {
      option.addEventListener('click', (e) => {
        e.preventDefault();
        const locale = option.dataset.locale;
        this.changeLanguage(locale);
      });

      // Keyboard support
      option.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          const locale = option.dataset.locale;
          this.changeLanguage(locale);
        }
      });
    });
  }

  setupTranslationTest() {
    const testInput = document.getElementById('translation-key');
    const testOutput = document.querySelector('.test-output');

    if (testInput && testOutput) {
      testInput.addEventListener('input', (e) => {
        const key = e.target.value.trim();
        if (key) {
          this.testTranslation(key, testOutput);
        } else {
          testOutput.textContent = 'Type a translation key above to see its value in the current language';
        }
      });
    }
  }

  detectBrowserLocale() {
    // Detect browser language preference
    const browserLocale = navigator.language || navigator.languages[0];
    const supportedCodes = Array.from(this.supportedLocales.keys());

    // Check for exact match
    if (supportedCodes.includes(browserLocale)) {
      if (browserLocale !== this.currentLocale) {
        this.suggestLanguageChange(browserLocale);
      }
      return;
    }

    // Check for language family match (e.g., 'en' for 'en-US')
    const languageFamily = browserLocale.split('-')[0];
    const familyMatch = supportedCodes.find(code => code.startsWith(languageFamily));

    if (familyMatch && familyMatch !== this.currentLocale) {
      this.suggestLanguageChange(familyMatch);
    }
  }

  setupFormatters() {
    // Setup locale-specific formatters
    try {
      this.formatters.set('date', new Intl.DateTimeFormat(this.currentLocale));
      this.formatters.set('time', new Intl.DateTimeFormat(this.currentLocale, { timeStyle: 'medium' }));
      this.formatters.set('number', new Intl.NumberFormat(this.currentLocale));
      this.formatters.set('currency', new Intl.NumberFormat(this.currentLocale, { style: 'currency', currency: 'USD' }));
      this.formatters.set('percent', new Intl.NumberFormat(this.currentLocale, { style: 'percent' }));
    } catch (error) {
      console.warn('Some Intl formatters not supported:', error);
    }
  }

  changeLanguage(newLocale) {
    if (newLocale === this.currentLocale) return;

    const oldLocale = this.currentLocale;
    this.currentLocale = newLocale;

    // Update DOM attributes
    const container = document.querySelector('.i18n-support');
    const localeConfig = this.supportedLocales.get(newLocale);

    if (container && localeConfig) {
      container.dataset.locale = newLocale;
      container.dataset.direction = localeConfig.direction;
      container.setAttribute('dir', localeConfig.direction);
      container.setAttribute('lang', newLocale);

      // Update RTL class
      container.classList.toggle('rtl', localeConfig.direction === 'rtl');
      container.classList.toggle('ltr', localeConfig.direction === 'ltr');

      // Update document language
      document.documentElement.setAttribute('lang', newLocale);
    }

    // Update UI elements
    this.updateLanguageSelector(newLocale);
    this.updateFormatters();
    this.updateCurrentLanguageStatus(localeConfig);

    // Announce change
    this.announceLanguageChange(localeConfig);

    // Save preference
    localStorage.setItem('preferred-locale', newLocale);

    // Trigger page reload to apply new translations
    // In a real application, this would dynamically load translations
    setTimeout(() => {
      window.location.reload();
    }, 1000);
  }

  updateLanguageSelector(newLocale) {
    // Update quick selector
    const quickSelect = document.getElementById('quick-language-select');
    if (quickSelect) {
      quickSelect.value = newLocale;
    }

    // Update language option buttons
    const languageOptions = document.querySelectorAll('.language-option');
    languageOptions.forEach(option => {
      const isSelected = option.dataset.locale === newLocale;
      option.setAttribute('aria-pressed', isSelected);

      if (isSelected) {
        option.classList.add('bg-blue-50', 'border-blue-300', 'dark:bg-blue-900/20', 'dark:border-blue-700');
        option.classList.remove('bg-white', 'border-gray-200', 'hover:bg-gray-50', 'dark:bg-gray-800', 'dark:border-gray-700', 'dark:hover:bg-gray-700');
      } else {
        option.classList.remove('bg-blue-50', 'border-blue-300', 'dark:bg-blue-900/20', 'dark:border-blue-700');
        option.classList.add('bg-white', 'border-gray-200', 'hover:bg-gray-50', 'dark:bg-gray-800', 'dark:border-gray-700', 'dark:hover:bg-gray-700');
      }
    });
  }

  updateFormatters() {
    // Update formatters for new locale
    this.setupFormatters();

    // Update format examples in demo section
    this.updateFormatExamples();
  }

  updateFormatExamples() {
    const now = new Date();

    // Update date/time examples
    const timeExample = document.querySelector('.feature-demo:first-child .font-mono');
    if (timeExample) {
      const examples = timeExample.parentElement.parentElement.querySelectorAll('.font-mono');
      if (examples.length >= 3) {
        examples[0].textContent = this.formatters.get('time')?.format(now) || now.toLocaleTimeString();
        examples[1].textContent = new Intl.DateTimeFormat(this.currentLocale, { dateStyle: 'full' }).format(now);
        examples[2].textContent = new Intl.DateTimeFormat(this.currentLocale, { dateStyle: 'short' }).format(now);
      }
    }

    // Update number examples
    const numberExamples = document.querySelector('.feature-demo:last-child .font-mono');
    if (numberExamples) {
      const examples = numberExamples.parentElement.parentElement.querySelectorAll('.font-mono');
      if (examples.length >= 4) {
        examples[0].textContent = this.formatters.get('number')?.format(1234567) || '1,234,567';
        examples[1].textContent = this.formatters.get('number')?.format(1234.56) || '1,234.56';
        examples[2].textContent = this.formatters.get('percent')?.format(0.85) || '85%';
        examples[3].textContent = this.formatters.get('currency')?.format(29.99) || '$29.99';
      }
    }
  }

  updateCurrentLanguageStatus(localeConfig) {
    const statusSection = document.querySelector('.current-language-status');
    if (statusSection && localeConfig) {
      const flag = statusSection.querySelector('[role="img"]');
      const nativeName = statusSection.querySelector('.font-medium');
      const details = statusSection.querySelector('.text-sm');

      if (flag) flag.textContent = localeConfig.flag;
      if (nativeName) nativeName.textContent = `Current language: ${localeConfig.nativeName}`;
      if (details) details.textContent = `${localeConfig.name} • ${localeConfig.direction.toUpperCase()} • Translated`;
    }
  }

  testTranslation(key, output) {
    // Simulate translation lookup
    const mockTranslations = {
      'common.save': 'Save',
      'common.cancel': 'Cancel',
      'common.delete': 'Delete',
      'nav.home': 'Home',
      'nav.config': 'Configuration',
      'error.notFound': 'Page not found'
    };

    const translation = mockTranslations[key];

    if (translation) {
      output.innerHTML = `
        <div class="flex justify-between items-center">
          <span class="font-medium text-green-600">Found:</span>
          <span class="font-mono">"${translation}"</span>
        </div>
        <div class="text-xs text-gray-500 mt-1">Key: ${key}</div>
      `;
    } else {
      output.innerHTML = `
        <div class="flex justify-between items-center">
          <span class="font-medium text-red-600">Not found:</span>
          <span class="font-mono text-gray-500">${key}</span>
        </div>
        <div class="text-xs text-gray-500 mt-1">This key does not exist in the current locale</div>
      `;
    }
  }

  suggestLanguageChange(suggestedLocale) {
    const localeConfig = this.supportedLocales.get(suggestedLocale);
    if (!localeConfig) return;

    // Create a subtle notification
    const notification = document.createElement('div');
    notification.className = 'fixed top-4 right-4 z-50 p-4 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg shadow-lg max-w-sm';
    notification.innerHTML = `
      <div class="flex items-start">
        <span class="text-xl mr-3">${localeConfig.flag}</span>
        <div class="flex-1">
          <div class="text-sm font-medium text-blue-900 dark:text-blue-200">
            Language suggestion
          </div>
          <div class="text-xs text-blue-700 dark:text-blue-300 mt-1">
            Would you like to switch to ${localeConfig.nativeName}?
          </div>
          <div class="flex gap-2 mt-3">
            <button class="accept-suggestion px-3 py-1 bg-blue-600 text-white text-xs rounded hover:bg-blue-700">
              Switch
            </button>
            <button class="dismiss-suggestion px-3 py-1 bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 text-xs rounded hover:bg-gray-300 dark:hover:bg-gray-600">
              Keep current
            </button>
          </div>
        </div>
      </div>
    `;

    document.body.appendChild(notification);

    // Handle buttons
    notification.querySelector('.accept-suggestion').addEventListener('click', () => {
      this.changeLanguage(suggestedLocale);
      notification.remove();
    });

    notification.querySelector('.dismiss-suggestion').addEventListener('click', () => {
      notification.remove();
    });

    // Auto-dismiss after 10 seconds
    setTimeout(() => {
      if (notification.parentElement) {
        notification.remove();
      }
    }, 10000);
  }

  announceLanguageChange(localeConfig) {
    const announcements = document.getElementById('i18n-announcements');
    if (announcements && localeConfig) {
      announcements.textContent = `Language changed to ${localeConfig.nativeName}`;
    }
  }

  announceInitialization() {
    const announcements = document.getElementById('i18n-announcements');
    if (announcements) {
      announcements.textContent = 'Internationalization system initialized and ready';
    }
  }
}

// Initialize when DOM is ready
if (typeof window !== 'undefined') {
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      new InternationalizationSupport();
    });
  } else {
    new InternationalizationSupport();
  }
}
</script>