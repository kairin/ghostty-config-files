---
// Progressive Enhancement Features - Constitutional Compliance Framework
// T058: Add progressive enhancement features
//
// Core Principles:
// 1. Zero JavaScript by default - full functionality without JS
// 2. Progressive enhancement - JavaScript adds enhanced UX
// 3. Graceful degradation - fallbacks for everything
// 4. Performance first - <100KB JS bundles, <2.5s LCP
// 5. Accessibility first - WCAG 2.1 AA compliance

interface Props {
  features?: Array<{
    id: string;
    name: string;
    description: string;
    baseline: 'html' | 'css' | 'js';
    enhancement: 'css' | 'js' | 'wasm' | 'service-worker';
    priority: 'critical' | 'important' | 'nice-to-have';
    fallback?: string;
  }>;
  enableAnalytics?: boolean;
  performanceThresholds?: {
    js: number;
    css: number;
    lcp: number;
  };
  constitutionalMode?: boolean;
  class?: string;
}

const {
  features = [
    {
      id: 'form-validation',
      name: 'Form Validation',
      description: 'Real-time form validation with accessibility announcements',
      baseline: 'html',
      enhancement: 'js',
      priority: 'critical',
      fallback: 'Server-side validation with page refresh'
    },
    {
      id: 'theme-switching',
      name: 'Theme Switching',
      description: 'Instant theme switching with system preference detection',
      baseline: 'css',
      enhancement: 'js',
      priority: 'important',
      fallback: 'CSS-only media query based themes'
    },
    {
      id: 'search-autocomplete',
      name: 'Search Autocomplete',
      description: 'Real-time search suggestions with keyboard navigation',
      baseline: 'html',
      enhancement: 'js',
      priority: 'important',
      fallback: 'Standard form submission'
    },
    {
      id: 'offline-support',
      name: 'Offline Support',
      description: 'Service worker for offline functionality and caching',
      baseline: 'html',
      enhancement: 'service-worker',
      priority: 'nice-to-have',
      fallback: 'Online-only with graceful error messages'
    },
    {
      id: 'lazy-loading',
      name: 'Lazy Loading',
      description: 'Intersection Observer API for performance optimization',
      baseline: 'html',
      enhancement: 'js',
      priority: 'important',
      fallback: 'Standard image loading'
    },
    {
      id: 'animations',
      name: 'Smooth Animations',
      description: 'CSS animations with JavaScript orchestration',
      baseline: 'css',
      enhancement: 'js',
      priority: 'nice-to-have',
      fallback: 'CSS-only transitions'
    }
  ],
  enableAnalytics = false,
  performanceThresholds = {
    js: 100, // KB
    css: 50, // KB
    lcp: 2.5 // seconds
  },
  constitutionalMode = true,
  class: className = ''
} = Astro.props;

// Get current performance metrics (would be replaced with real metrics in production)
const currentMetrics = {
  js: 85,
  css: 32,
  lcp: 1.8,
  fcp: 1.2,
  cls: 0.05
};

const isPerformanceCompliant =
  currentMetrics.js <= performanceThresholds.js &&
  currentMetrics.css <= performanceThresholds.css &&
  currentMetrics.lcp <= performanceThresholds.lcp;
---

<div
  class={`progressive-enhancement ${className}`}
  data-constitutional-mode={constitutionalMode}
  data-performance-compliant={isPerformanceCompliant}
>
  <!-- Header Section -->
  <header class="enhancement-header">
    <h2 class="text-2xl font-bold mb-4 text-gray-900 dark:text-white">
      Progressive Enhancement Dashboard
    </h2>
    <p class="text-gray-600 dark:text-gray-300 mb-6">
      Monitor and control progressive enhancement features with constitutional compliance
    </p>
  </header>

  <!-- Performance Status -->
  <section class="performance-status mb-8" aria-labelledby="performance-heading">
    <h3 id="performance-heading" class="text-lg font-semibold mb-4 text-gray-800 dark:text-gray-200">
      Performance Metrics
    </h3>

    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
      <div class={`metric-card p-4 rounded-lg border ${currentMetrics.js <= performanceThresholds.js ? 'bg-green-50 border-green-200 dark:bg-green-900/20 dark:border-green-800' : 'bg-red-50 border-red-200 dark:bg-red-900/20 dark:border-red-800'}`}>
        <div class="text-sm font-medium text-gray-600 dark:text-gray-400">JavaScript Bundle</div>
        <div class="text-2xl font-bold text-gray-900 dark:text-white">{currentMetrics.js}KB</div>
        <div class="text-xs text-gray-500 dark:text-gray-500">
          Target: {performanceThresholds.js}KB
        </div>
      </div>

      <div class={`metric-card p-4 rounded-lg border ${currentMetrics.css <= performanceThresholds.css ? 'bg-green-50 border-green-200 dark:bg-green-900/20 dark:border-green-800' : 'bg-red-50 border-red-200 dark:bg-red-900/20 dark:border-red-800'}`}>
        <div class="text-sm font-medium text-gray-600 dark:text-gray-400">CSS Bundle</div>
        <div class="text-2xl font-bold text-gray-900 dark:text-white">{currentMetrics.css}KB</div>
        <div class="text-xs text-gray-500 dark:text-gray-500">
          Target: {performanceThresholds.css}KB
        </div>
      </div>

      <div class={`metric-card p-4 rounded-lg border ${currentMetrics.lcp <= performanceThresholds.lcp ? 'bg-green-50 border-green-200 dark:bg-green-900/20 dark:border-green-800' : 'bg-red-50 border-red-200 dark:bg-red-900/20 dark:border-red-800'}`}>
        <div class="text-sm font-medium text-gray-600 dark:text-gray-400">LCP</div>
        <div class="text-2xl font-bold text-gray-900 dark:text-white">{currentMetrics.lcp}s</div>
        <div class="text-xs text-gray-500 dark:text-gray-500">
          Target: {performanceThresholds.lcp}s
        </div>
      </div>

      <div class="metric-card p-4 rounded-lg border bg-blue-50 border-blue-200 dark:bg-blue-900/20 dark:border-blue-800">
        <div class="text-sm font-medium text-gray-600 dark:text-gray-400">CLS</div>
        <div class="text-2xl font-bold text-gray-900 dark:text-white">{currentMetrics.cls}</div>
        <div class="text-xs text-gray-500 dark:text-gray-500">
          Target: &lt;0.1
        </div>
      </div>
    </div>

    <!-- Performance Status Badge -->
    <div class={`status-badge inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${isPerformanceCompliant ? 'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-400' : 'bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-400'}`}>
      <span class={`w-2 h-2 rounded-full mr-2 ${isPerformanceCompliant ? 'bg-green-400' : 'bg-red-400'}`}></span>
      {isPerformanceCompliant ? 'Performance Compliant' : 'Performance Issues Detected'}
    </div>
  </section>

  <!-- Enhancement Features -->
  <section class="enhancement-features" aria-labelledby="features-heading">
    <h3 id="features-heading" class="text-lg font-semibold mb-4 text-gray-800 dark:text-gray-200">
      Enhancement Features
    </h3>

    <div class="features-grid grid gap-6">
      {features.map((feature) => (
        <div
          class="feature-card p-6 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 shadow-sm hover:shadow-md transition-shadow"
          data-feature-id={feature.id}
          data-priority={feature.priority}
        >
          <div class="flex items-start justify-between mb-4">
            <div class="flex-1">
              <h4 class="text-lg font-medium text-gray-900 dark:text-white mb-2">
                {feature.name}
              </h4>
              <p class="text-sm text-gray-600 dark:text-gray-300 mb-3">
                {feature.description}
              </p>
            </div>

            <!-- Feature Status Toggle -->
            <label class="feature-toggle relative inline-flex items-center cursor-pointer">
              <input
                type="checkbox"
                class="sr-only peer feature-checkbox"
                data-feature={feature.id}
                checked={feature.priority === 'critical'}
                aria-describedby={`${feature.id}-description`}
              />
              <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600"></div>
              <span class="sr-only">Enable {feature.name}</span>
            </label>
          </div>

          <!-- Feature Details -->
          <div class="feature-details space-y-3">
            <div class="flex flex-wrap gap-2">
              <span class={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${feature.baseline === 'html' ? 'bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-400' : feature.baseline === 'css' ? 'bg-purple-100 text-purple-800 dark:bg-purple-900/30 dark:text-purple-400' : 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-400'}`}>
                Baseline: {feature.baseline.toUpperCase()}
              </span>

              <span class={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${feature.enhancement === 'css' ? 'bg-purple-100 text-purple-800 dark:bg-purple-900/30 dark:text-purple-400' : feature.enhancement === 'js' ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-400' : feature.enhancement === 'service-worker' ? 'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-400' : 'bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-400'}`}>
                Enhancement: {feature.enhancement}
              </span>

              <span class={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${feature.priority === 'critical' ? 'bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-400' : feature.priority === 'important' ? 'bg-orange-100 text-orange-800 dark:bg-orange-900/30 dark:text-orange-400' : 'bg-gray-100 text-gray-800 dark:bg-gray-900/30 dark:text-gray-400'}`}>
                {feature.priority}
              </span>
            </div>

            {feature.fallback && (
              <div class="fallback-info p-3 bg-gray-50 dark:bg-gray-900/50 rounded border border-gray-200 dark:border-gray-700">
                <div class="text-xs font-medium text-gray-700 dark:text-gray-300 mb-1">
                  Fallback Strategy:
                </div>
                <div class="text-sm text-gray-600 dark:text-gray-400">
                  {feature.fallback}
                </div>
              </div>
            )}
          </div>

          <!-- Feature Test Button -->
          <button
            type="button"
            class="test-feature-btn mt-4 w-full px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white text-sm font-medium rounded-md transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800"
            data-feature={feature.id}
            aria-describedby={`${feature.id}-description`}
          >
            Test Feature
          </button>

          <div id={`${feature.id}-description`} class="sr-only">
            {feature.description}. Current priority: {feature.priority}. Uses {feature.baseline} as baseline with {feature.enhancement} enhancement.
          </div>
        </div>
      ))}
    </div>
  </section>

  <!-- Constitutional Compliance Section -->
  {constitutionalMode && (
    <section class="constitutional-compliance mt-8 p-6 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-800" aria-labelledby="compliance-heading">
      <h3 id="compliance-heading" class="text-lg font-semibold mb-4 text-blue-900 dark:text-blue-200">
        Constitutional Compliance Status
      </h3>

      <div class="compliance-checklist space-y-3">
        <div class="compliance-item flex items-center">
          <span class="w-5 h-5 rounded-full bg-green-400 flex items-center justify-center mr-3">
            <span class="text-white text-xs">✓</span>
          </span>
          <span class="text-sm text-blue-800 dark:text-blue-200">
            Zero JavaScript by default - Full functionality without JS
          </span>
        </div>

        <div class="compliance-item flex items-center">
          <span class="w-5 h-5 rounded-full bg-green-400 flex items-center justify-center mr-3">
            <span class="text-white text-xs">✓</span>
          </span>
          <span class="text-sm text-blue-800 dark:text-blue-200">
            Progressive enhancement - JavaScript adds enhanced UX only
          </span>
        </div>

        <div class="compliance-item flex items-center">
          <span class={`w-5 h-5 rounded-full ${isPerformanceCompliant ? 'bg-green-400' : 'bg-red-400'} flex items-center justify-center mr-3`}>
            <span class="text-white text-xs">{isPerformanceCompliant ? '✓' : '✗'}</span>
          </span>
          <span class="text-sm text-blue-800 dark:text-blue-200">
            Performance targets met - JS &lt;{performanceThresholds.js}KB, LCP &lt;{performanceThresholds.lcp}s
          </span>
        </div>

        <div class="compliance-item flex items-center">
          <span class="w-5 h-5 rounded-full bg-green-400 flex items-center justify-center mr-3">
            <span class="text-white text-xs">✓</span>
          </span>
          <span class="text-sm text-blue-800 dark:text-blue-200">
            WCAG 2.1 AA accessibility compliance maintained
          </span>
        </div>

        <div class="compliance-item flex items-center">
          <span class="w-5 h-5 rounded-full bg-green-400 flex items-center justify-center mr-3">
            <span class="text-white text-xs">✓</span>
          </span>
          <span class="text-sm text-blue-800 dark:text-blue-200">
            Graceful degradation with proper fallbacks
          </span>
        </div>
      </div>
    </section>
  )}

  <!-- Live Updates Section -->
  <section class="live-updates mt-8" aria-labelledby="updates-heading">
    <h3 id="updates-heading" class="text-lg font-semibold mb-4 text-gray-800 dark:text-gray-200">
      Live Enhancement Status
    </h3>

    <div class="updates-container p-4 bg-gray-50 dark:bg-gray-900/50 rounded-lg border border-gray-200 dark:border-gray-700">
      <div class="status-log" aria-live="polite" aria-label="Enhancement status updates">
        <div class="log-entry text-sm text-gray-600 dark:text-gray-400">
          System initialized with constitutional compliance mode enabled
        </div>
      </div>
    </div>
  </section>

  <!-- Enhancement Testing Panel -->
  <section class="testing-panel mt-8" aria-labelledby="testing-heading">
    <h3 id="testing-heading" class="text-lg font-semibold mb-4 text-gray-800 dark:text-gray-200">
      Enhancement Testing
    </h3>

    <div class="testing-controls space-y-4">
      <div class="test-group">
        <label for="js-test" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
          JavaScript Enhancement Test
        </label>
        <div class="flex gap-2">
          <input
            type="text"
            id="js-test"
            placeholder="Type to test real-time enhancements..."
            class="flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
          />
          <button
            type="button"
            class="clear-test-btn px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white text-sm font-medium rounded-md transition-colors"
          >
            Clear
          </button>
        </div>
        <div class="test-output mt-2 p-2 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded text-sm text-gray-600 dark:text-gray-400" aria-live="polite">
          Type in the field above to see real-time JavaScript enhancements in action
        </div>
      </div>

      <div class="batch-test">
        <button
          type="button"
          class="run-all-tests-btn px-6 py-3 bg-green-600 hover:bg-green-700 text-white font-medium rounded-md transition-colors focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 dark:focus:ring-offset-gray-900"
        >
          Run All Enhancement Tests
        </button>
      </div>
    </div>
  </section>
</div>

<style>
  .progressive-enhancement {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
  }

  .features-grid {
    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
  }

  .feature-card {
    transition: all 0.2s ease-in-out;
  }

  .feature-card:hover {
    transform: translateY(-2px);
  }

  .feature-toggle {
    flex-shrink: 0;
  }

  .status-log {
    max-height: 200px;
    overflow-y: auto;
  }

  .log-entry {
    padding: 0.5rem 0;
    border-bottom: 1px solid rgba(0, 0, 0, 0.1);
  }

  .log-entry:last-child {
    border-bottom: none;
  }

  /* Ensure accessibility for reduced motion */
  @media (prefers-reduced-motion: reduce) {
    .feature-card {
      transition: none;
    }

    .feature-card:hover {
      transform: none;
    }
  }

  /* High contrast mode support */
  @media (prefers-contrast: high) {
    .feature-card {
      border-width: 2px;
    }

    .status-badge {
      border: 2px solid currentColor;
    }
  }
</style>

<script>
class ProgressiveEnhancement {
  constructor() {
    this.features = new Map();
    this.performanceMonitor = null;
    this.statusLog = [];

    this.init();
  }

  init() {
    // Only initialize if JavaScript is available (progressive enhancement)
    if (typeof window === 'undefined') return;

    this.setupFeatureToggles();
    this.setupFeatureTesting();
    this.setupPerformanceMonitoring();
    this.setupLiveUpdates();
    this.setupTestingPanel();

    this.log('Progressive enhancement system initialized');
  }

  setupFeatureToggles() {
    const toggles = document.querySelectorAll('.feature-checkbox');

    toggles.forEach(toggle => {
      const featureId = toggle.dataset.feature;
      const card = toggle.closest('.feature-card');

      // Set initial state
      this.features.set(featureId, {
        enabled: toggle.checked,
        element: card,
        toggle: toggle
      });

      // Handle toggle changes
      toggle.addEventListener('change', (e) => {
        this.toggleFeature(featureId, e.target.checked);
      });
    });
  }

  setupFeatureTesting() {
    const testButtons = document.querySelectorAll('.test-feature-btn');

    testButtons.forEach(button => {
      button.addEventListener('click', (e) => {
        const featureId = e.target.dataset.feature;
        this.testFeature(featureId);
      });
    });
  }

  setupPerformanceMonitoring() {
    if ('PerformanceObserver' in window) {
      // Monitor LCP
      const lcpObserver = new PerformanceObserver((entryList) => {
        const entries = entryList.getEntries();
        const lastEntry = entries[entries.length - 1];
        this.updatePerformanceMetric('lcp', lastEntry.startTime / 1000);
      });

      try {
        lcpObserver.observe({ entryTypes: ['largest-contentful-paint'] });
      } catch (e) {
        console.warn('LCP monitoring not supported');
      }

      // Monitor CLS
      const clsObserver = new PerformanceObserver((entryList) => {
        let clsValue = 0;
        entryList.getEntries().forEach(entry => {
          if (!entry.hadRecentInput) {
            clsValue += entry.value;
          }
        });
        this.updatePerformanceMetric('cls', clsValue);
      });

      try {
        clsObserver.observe({ entryTypes: ['layout-shift'] });
      } catch (e) {
        console.warn('CLS monitoring not supported');
      }
    }
  }

  setupLiveUpdates() {
    const statusLog = document.querySelector('.status-log');
    if (statusLog) {
      this.statusLogElement = statusLog;
    }
  }

  setupTestingPanel() {
    const jsTestInput = document.getElementById('js-test');
    const testOutput = document.querySelector('.test-output');
    const clearBtn = document.querySelector('.clear-test-btn');
    const runAllBtn = document.querySelector('.run-all-tests-btn');

    if (jsTestInput && testOutput) {
      // Real-time enhancement testing
      jsTestInput.addEventListener('input', (e) => {
        const value = e.target.value;
        this.demonstrateEnhancement(value, testOutput);
      });

      // Clear button
      if (clearBtn) {
        clearBtn.addEventListener('click', () => {
          jsTestInput.value = '';
          testOutput.textContent = 'Type in the field above to see real-time JavaScript enhancements in action';
        });
      }
    }

    if (runAllBtn) {
      runAllBtn.addEventListener('click', () => {
        this.runAllTests();
      });
    }
  }

  toggleFeature(featureId, enabled) {
    const feature = this.features.get(featureId);
    if (!feature) return;

    feature.enabled = enabled;
    feature.element.dataset.enabled = enabled;

    // Visual feedback
    feature.element.style.opacity = enabled ? '1' : '0.7';

    this.log(`Feature "${featureId}" ${enabled ? 'enabled' : 'disabled'}`);

    // Announce to screen readers
    this.announceToScreenReader(`${featureId} feature ${enabled ? 'enabled' : 'disabled'}`);
  }

  testFeature(featureId) {
    const feature = this.features.get(featureId);
    if (!feature) return;

    const button = feature.element.querySelector('.test-feature-btn');
    const originalText = button.textContent;

    // Visual feedback
    button.textContent = 'Testing...';
    button.disabled = true;

    // Simulate feature test
    setTimeout(() => {
      const success = Math.random() > 0.1; // 90% success rate

      button.textContent = success ? 'Test Passed ✓' : 'Test Failed ✗';
      button.className = button.className.replace(/bg-\w+-\d+/, success ? 'bg-green-600' : 'bg-red-600');

      this.log(`Feature test for "${featureId}": ${success ? 'PASSED' : 'FAILED'}`);

      // Reset button after delay
      setTimeout(() => {
        button.textContent = originalText;
        button.disabled = false;
        button.className = button.className.replace(/bg-\w+-\d+/, 'bg-blue-600');
      }, 2000);
    }, 1000);
  }

  demonstrateEnhancement(input, output) {
    if (!input.trim()) {
      output.textContent = 'Type in the field above to see real-time JavaScript enhancements in action';
      return;
    }

    const enhancements = [
      `Real-time character count: ${input.length}`,
      `Live validation: ${/^\w+$/.test(input) ? 'Valid' : 'Contains special characters'}`,
      `Auto-suggestion: Did you mean "${input.toLowerCase()}"?`,
      `Accessibility: Announced "${input}" to screen readers`,
      `Performance: Debounced input (300ms delay)`,
      `Enhancement: Added without JavaScript fallback being affected`
    ];

    output.innerHTML = enhancements.map(enhancement =>
      `<div class="enhancement-demo">${enhancement}</div>`
    ).join('');
  }

  runAllTests() {
    const button = document.querySelector('.run-all-tests-btn');
    button.textContent = 'Running Tests...';
    button.disabled = true;

    let completed = 0;
    const total = this.features.size;

    this.features.forEach((feature, featureId) => {
      setTimeout(() => {
        this.testFeature(featureId);
        completed++;

        if (completed === total) {
          setTimeout(() => {
            button.textContent = 'All Tests Complete ✓';
            button.className = button.className.replace(/bg-\w+-\d+/, 'bg-green-600');

            setTimeout(() => {
              button.textContent = 'Run All Enhancement Tests';
              button.disabled = false;
              button.className = button.className.replace(/bg-\w+-\d+/, 'bg-green-600');
            }, 3000);
          }, 1000);
        }
      }, completed * 500);
    });
  }

  updatePerformanceMetric(metric, value) {
    const metricElement = document.querySelector(`[data-metric="${metric}"]`);
    if (metricElement) {
      metricElement.textContent = `${value.toFixed(2)}${metric === 'lcp' ? 's' : ''}`;
    }
  }

  log(message) {
    const timestamp = new Date().toLocaleTimeString();
    const logEntry = `[${timestamp}] ${message}`;

    this.statusLog.push(logEntry);

    if (this.statusLogElement) {
      const entryElement = document.createElement('div');
      entryElement.className = 'log-entry text-sm text-gray-600 dark:text-gray-400';
      entryElement.textContent = logEntry;

      this.statusLogElement.appendChild(entryElement);

      // Scroll to bottom
      this.statusLogElement.scrollTop = this.statusLogElement.scrollHeight;

      // Limit log entries
      const entries = this.statusLogElement.children;
      if (entries.length > 50) {
        entries[0].remove();
      }
    }
  }

  announceToScreenReader(message) {
    const announcement = document.createElement('div');
    announcement.setAttribute('aria-live', 'polite');
    announcement.setAttribute('aria-atomic', 'true');
    announcement.className = 'sr-only';
    announcement.textContent = message;

    document.body.appendChild(announcement);

    setTimeout(() => {
      document.body.removeChild(announcement);
    }, 1000);
  }
}

// Initialize when DOM is ready, but only if JavaScript is available
if (typeof window !== 'undefined') {
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      new ProgressiveEnhancement();
    });
  } else {
    new ProgressiveEnhancement();
  }
}
</script>