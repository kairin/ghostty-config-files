---
export interface Props {
  showResults?: boolean;
  autoScan?: boolean;
  class?: string;
}

const {
  showResults = false,
  autoScan = true,
  class: className = '',
  ...props
} = Astro.props;

// Constitutional accessibility validation component
const containerClasses = [
  "accessibility-validator",
  "bg-background border border-border rounded-lg p-4",
  className
].filter(Boolean).join(' ');
---

<div class={containerClasses} {...props}>
  {showResults && (
    <div class="accessibility-results mb-4">
      <h3 class="text-lg font-semibold mb-2 flex items-center gap-2">
        <span class="accessibility-icon" aria-hidden="true">♿</span>
        Accessibility Validation Results
      </h3>

      <div id="accessibility-summary" class="mb-3 p-3 rounded-md bg-muted">
        <div class="flex items-center justify-between">
          <span class="text-sm font-medium">Overall Score:</span>
          <span id="accessibility-score" class="text-lg font-bold">--</span>
        </div>
      </div>

      <div class="space-y-2">
        <div class="accessibility-check">
          <div class="flex items-center justify-between p-2 rounded bg-background border">
            <span class="text-sm">Alt text on images</span>
            <span id="alt-text-status" class="status-indicator">--</span>
          </div>
        </div>

        <div class="accessibility-check">
          <div class="flex items-center justify-between p-2 rounded bg-background border">
            <span class="text-sm">Form labels</span>
            <span id="form-labels-status" class="status-indicator">--</span>
          </div>
        </div>

        <div class="accessibility-check">
          <div class="flex items-center justify-between p-2 rounded bg-background border">
            <span class="text-sm">Heading structure</span>
            <span id="heading-structure-status" class="status-indicator">--</span>
          </div>
        </div>

        <div class="accessibility-check">
          <div class="flex items-center justify-between p-2 rounded bg-background border">
            <span class="text-sm">Color contrast</span>
            <span id="color-contrast-status" class="status-indicator">--</span>
          </div>
        </div>

        <div class="accessibility-check">
          <div class="flex items-center justify-between p-2 rounded bg-background border">
            <span class="text-sm">ARIA labels</span>
            <span id="aria-labels-status" class="status-indicator">--</span>
          </div>
        </div>

        <div class="accessibility-check">
          <div class="flex items-center justify-between p-2 rounded bg-background border">
            <span class="text-sm">Keyboard navigation</span>
            <span id="keyboard-nav-status" class="status-indicator">--</span>
          </div>
        </div>
      </div>

      <div id="accessibility-details" class="mt-4 space-y-2 hidden">
        <h4 class="font-medium text-sm text-muted-foreground">Issues Found:</h4>
        <div id="issues-list" class="space-y-1 text-sm"></div>
      </div>

      <div class="mt-4 flex gap-2">
        <button
          id="accessibility-scan-btn"
          class="inline-flex items-center justify-center rounded-md bg-primary text-primary-foreground hover:bg-primary/90 h-9 px-4 py-2 text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2"
        >
          Run Accessibility Scan
        </button>

        <button
          id="accessibility-details-toggle"
          class="inline-flex items-center justify-center rounded-md border border-input bg-background hover:bg-accent hover:text-accent-foreground h-9 px-4 py-2 text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2"
        >
          Show Details
        </button>
      </div>
    </div>
  )}
</div>

<script>
  // Accessibility validation functionality
  // Note: Dynamic import used below instead of static import for better error handling

  class AccessibilityValidator {
    private container: HTMLElement | null = null;
    private autoScan: boolean = true;
    // Removed unused lastScanResults property - constitutional compliance

    constructor() {
      this.init();
    }

    private async init(): Promise<void> {
      // Wait for DOM to be ready
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => this.setup());
      } else {
        this.setup();
      }
    }

    private async setup(): Promise<void> {
      this.container = document.querySelector('.accessibility-validator');

      if (!this.container) {
        return;
      }

      // Check if auto-scan is enabled
      this.autoScan = this.container.hasAttribute('data-auto-scan');

      // Setup event listeners
      this.setupEventListeners();

      // Run initial scan if auto-scan is enabled
      if (this.autoScan) {
        // Delay to allow page to fully render
        setTimeout(() => {
          this.runAccessibilityScan();
        }, 1000);
      }
    }

    private setupEventListeners(): void {
      // Scan button
      const scanBtn = document.getElementById('accessibility-scan-btn');
      if (scanBtn) {
        scanBtn.addEventListener('click', () => this.runAccessibilityScan());
      }

      // Details toggle
      const detailsToggle = document.getElementById('accessibility-details-toggle');
      const detailsContainer = document.getElementById('accessibility-details');

      if (detailsToggle && detailsContainer) {
        detailsToggle.addEventListener('click', () => {
          const isHidden = detailsContainer.classList.contains('hidden');
          detailsContainer.classList.toggle('hidden', !isHidden);
          detailsToggle.textContent = isHidden ? 'Hide Details' : 'Show Details';
        });
      }
    }

    private async runAccessibilityScan(): Promise<void> {
      try {
        // Update scan button state
        const scanBtn = document.getElementById('accessibility-scan-btn');
        if (scanBtn) {
          scanBtn.textContent = 'Scanning...';
          scanBtn.setAttribute('disabled', 'true');
        }

        // Run comprehensive accessibility scan
        const results = await this.performAccessibilityScan();
        // Constitutional compliance: results processed directly without storage

        // Update UI with results
        this.updateResults(results);

        // Announce results to screen readers
        this.announceResults(results);

      } catch (error) {
        console.error('Accessibility scan failed:', error);
        this.updateError('Accessibility scan failed. Please try again.');
      } finally {
        // Reset scan button
        const scanBtn = document.getElementById('accessibility-scan-btn');
        if (scanBtn) {
          scanBtn.textContent = 'Run Accessibility Scan';
          scanBtn.removeAttribute('disabled');
        }
      }
    }

    private async performAccessibilityScan(): Promise<any> {
      const results = {
        score: 0,
        totalChecks: 6,
        passedChecks: 0,
        issues: [] as Array<{ type: string; message: string; element?: HTMLElement }>,
        checks: {
          altText: { passed: false, issues: [] as string[] },
          formLabels: { passed: false, issues: [] as string[] },
          headingStructure: { passed: false, issues: [] as string[] },
          colorContrast: { passed: false, issues: [] as string[] },
          ariaLabels: { passed: false, issues: [] as string[] },
          keyboardNav: { passed: false, issues: [] as string[] }
        }
      };

      // Check alt text on images
      results.checks.altText = this.checkAltText();
      if (results.checks.altText.passed) results.passedChecks++;

      // Check form labels
      results.checks.formLabels = this.checkFormLabels();
      if (results.checks.formLabels.passed) results.passedChecks++;

      // Check heading structure
      results.checks.headingStructure = this.checkHeadingStructure();
      if (results.checks.headingStructure.passed) results.passedChecks++;

      // Check color contrast (simplified)
      results.checks.colorContrast = this.checkColorContrast();
      if (results.checks.colorContrast.passed) results.passedChecks++;

      // Check ARIA labels
      results.checks.ariaLabels = this.checkAriaLabels();
      if (results.checks.ariaLabels.passed) results.passedChecks++;

      // Check keyboard navigation
      results.checks.keyboardNav = this.checkKeyboardNavigation();
      if (results.checks.keyboardNav.passed) results.passedChecks++;

      // Calculate score
      results.score = Math.round((results.passedChecks / results.totalChecks) * 100);

      // Collect all issues
      Object.values(results.checks).forEach(check => {
        results.issues.push(...check.issues.map(issue => ({ type: 'accessibility', message: issue })));
      });

      return results;
    }

    private checkAltText(): { passed: boolean; issues: string[] } {
      const images = document.querySelectorAll('img') as NodeListOf<HTMLImageElement>;
      const issues: string[] = [];

      images.forEach((img, index) => {
        if (!img.alt && !img.getAttribute('aria-label') && !img.getAttribute('aria-labelledby')) {
          issues.push(`Image ${index + 1} missing alt text`);
        }
      });

      return { passed: issues.length === 0, issues };
    }

    private checkFormLabels(): { passed: boolean; issues: string[] } {
      const formControls = document.querySelectorAll('input, textarea, select') as NodeListOf<HTMLElement>;
      const issues: string[] = [];

      formControls.forEach((control, index) => {
        const hasLabel = control.getAttribute('aria-label') ||
                        control.getAttribute('aria-labelledby') ||
                        document.querySelector(`label[for="${control.id}"]`);

        if (!hasLabel) {
          const tagName = control.tagName.toLowerCase();
          issues.push(`${tagName} control ${index + 1} missing accessible label`);
        }
      });

      return { passed: issues.length === 0, issues };
    }

    private checkHeadingStructure(): { passed: boolean; issues: string[] } {
      const headings = document.querySelectorAll('h1, h2, h3, h4, h5, h6') as NodeListOf<HTMLElement>;
      const issues: string[] = [];
      let previousLevel = 0;

      headings.forEach((heading, index) => {
        const level = parseInt(heading.tagName.slice(1));

        if (index === 0 && level !== 1) {
          issues.push('Page should start with h1 heading');
        }

        if (level > previousLevel + 1) {
          issues.push(`Heading level skipped: ${heading.tagName} after h${previousLevel}`);
        }

        previousLevel = level;
      });

      return { passed: issues.length === 0, issues };
    }

    private checkColorContrast(): { passed: boolean; issues: string[] } {
      const issues: string[] = [];

      // This is a simplified check - in practice, you'd need more sophisticated color analysis
      const elementsToCheck = document.querySelectorAll('p, span, div, button, a') as NodeListOf<HTMLElement>;
      let contrastIssues = 0;

      elementsToCheck.forEach((element) => {
        const style = window.getComputedStyle(element);
        const backgroundColor = style.backgroundColor;
        const color = style.color;

        // Simple check for transparent backgrounds or same colors
        if (backgroundColor === 'rgba(0, 0, 0, 0)' || backgroundColor === color) {
          contrastIssues++;
        }
      });

      if (contrastIssues > 0) {
        issues.push(`${contrastIssues} elements may have insufficient color contrast`);
      }

      return { passed: issues.length === 0, issues };
    }

    private checkAriaLabels(): { passed: boolean; issues: string[] } {
      const interactiveElements = document.querySelectorAll('button, a, [role="button"], [role="link"]') as NodeListOf<HTMLElement>;
      const issues: string[] = [];

      interactiveElements.forEach((element, index) => {
        const hasAccessibleName = element.getAttribute('aria-label') ||
                                element.getAttribute('aria-labelledby') ||
                                element.textContent?.trim() ||
                                element.getAttribute('title');

        if (!hasAccessibleName) {
          const tagName = element.tagName.toLowerCase();
          const role = element.getAttribute('role') || tagName;
          issues.push(`${role} element ${index + 1} missing accessible name`);
        }
      });

      return { passed: issues.length === 0, issues };
    }

    private checkKeyboardNavigation(): { passed: boolean; issues: string[] } {
      const focusableElements = document.querySelectorAll(
        'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
      ) as NodeListOf<HTMLElement>;

      const issues: string[] = [];

      focusableElements.forEach((element, index) => {
        // Check if element is visible and can receive focus
        const style = window.getComputedStyle(element);
        if (style.display === 'none' || style.visibility === 'hidden') {
          return;
        }

        // Check for tabindex=-1 on interactive elements (which removes them from tab order)
        if (element.getAttribute('tabindex') === '-1' &&
            ['button', 'a', 'input', 'select', 'textarea'].includes(element.tagName.toLowerCase())) {
          issues.push(`Interactive element ${index + 1} removed from keyboard navigation`);
        }
      });

      return { passed: issues.length === 0, issues };
    }

    private updateResults(results: any): void {
      // Update score
      const scoreElement = document.getElementById('accessibility-score');
      if (scoreElement) {
        scoreElement.textContent = `${results.score}%`;
        scoreElement.className = results.score >= 90 ? 'text-green-600 font-bold' :
                                 results.score >= 70 ? 'text-yellow-600 font-bold' :
                                 'text-red-600 font-bold';
      }

      // Update individual check statuses
      this.updateCheckStatus('alt-text-status', results.checks.altText.passed);
      this.updateCheckStatus('form-labels-status', results.checks.formLabels.passed);
      this.updateCheckStatus('heading-structure-status', results.checks.headingStructure.passed);
      this.updateCheckStatus('color-contrast-status', results.checks.colorContrast.passed);
      this.updateCheckStatus('aria-labels-status', results.checks.ariaLabels.passed);
      this.updateCheckStatus('keyboard-nav-status', results.checks.keyboardNav.passed);

      // Update issues list
      this.updateIssuesList(results.issues);
    }

    private updateCheckStatus(elementId: string, passed: boolean): void {
      const element = document.getElementById(elementId);
      if (element) {
        element.textContent = passed ? '✅' : '❌';
        element.setAttribute('aria-label', passed ? 'Passed' : 'Failed');
      }
    }

    private updateIssuesList(issues: Array<{ type: string; message: string }>): void {
      const issuesList = document.getElementById('issues-list');
      if (!issuesList) return;

      issuesList.innerHTML = '';

      if (issues.length === 0) {
        issuesList.innerHTML = '<div class="text-green-600">No accessibility issues found! 🎉</div>';
      } else {
        issues.forEach(issue => {
          const issueElement = document.createElement('div');
          issueElement.className = 'p-2 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded text-red-800 dark:text-red-200';
          issueElement.textContent = issue.message;
          issuesList.appendChild(issueElement);
        });
      }
    }

    private updateError(message: string): void {
      const scoreElement = document.getElementById('accessibility-score');
      if (scoreElement) {
        scoreElement.textContent = 'Error';
        scoreElement.className = 'text-red-600 font-bold';
      }

      // Show error message
      const issuesList = document.getElementById('issues-list');
      if (issuesList) {
        issuesList.innerHTML = `<div class="text-red-600">${message}</div>`;
      }
    }

    private announceResults(results: any): void {
      const message = `Accessibility scan complete. Score: ${results.score}%. ${results.issues.length} issues found.`;

      // Create screen reader announcement
      const announcement = document.createElement('div');
      announcement.setAttribute('aria-live', 'polite');
      announcement.setAttribute('aria-atomic', 'true');
      announcement.className = 'sr-only';
      announcement.textContent = message;

      document.body.appendChild(announcement);

      // Remove after announcement
      setTimeout(() => {
        if (document.body.contains(announcement)) {
          document.body.removeChild(announcement);
        }
      }, 1000);
    }
  }

  // Initialize accessibility validator
  new AccessibilityValidator();
</script>

<style>
  /* Enhanced accessibility validator styling */
  .accessibility-validator {
    contain: layout style paint;
  }

  .accessibility-icon {
    font-size: 1.2em;
  }

  .status-indicator {
    font-size: 1.1em;
    min-width: 2em;
    text-align: center;
  }

  /* High contrast mode support */
  @media (prefers-contrast: high) {
    .accessibility-validator {
      border-width: 2px;
    }

    .accessibility-check > div {
      border-width: 2px;
    }
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .accessibility-validator * {
      transition: none !important;
      animation: none !important;
    }
  }

  /* Focus management */
  .accessibility-validator button:focus-visible {
    outline: 2px solid hsl(var(--ring));
    outline-offset: 2px;
  }

  /* Loading state for scan button */
  button[disabled] {
    opacity: 0.6;
    cursor: not-allowed;
  }

  /* Results styling */
  #accessibility-summary {
    background: hsl(var(--muted));
  }

  .accessibility-check:hover > div {
    background: hsl(var(--accent));
  }

  /* Issues list styling */
  #issues-list > div {
    border-radius: 0.375rem;
  }

  /* Constitutional compliance indicators */
  .text-green-600 {
    color: rgb(22 163 74);
  }

  .text-yellow-600 {
    color: rgb(202 138 4);
  }

  .text-red-600 {
    color: rgb(220 38 38);
  }

  .dark .text-green-600 {
    color: rgb(34 197 94);
  }

  .dark .text-yellow-600 {
    color: rgb(234 179 8);
  }

  .dark .text-red-600 {
    color: rgb(239 68 68);
  }
</style>