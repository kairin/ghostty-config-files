---
/**
 * @component Input
 * @summary A styled, accessible input field component.
 * @description This component renders a standard HTML `<input>` element with pre-applied styling for consistency across the application. It supports various input types and accessibility attributes.
 * @property {'text' | 'email' | 'password' | 'number' | 'search' | 'tel' | 'url'} [type='text'] - The type of the input field.
 * @property {string} [placeholder] - Placeholder text for the input.
 * @property {string} [value] - The initial value of the input.
 * @property {boolean} [disabled=false] - If true, the input is disabled.
 * @property {boolean} [required=false] - If true, the input is required for form submission.
 * @property {boolean} [readonly=false] - If true, the input's value cannot be changed.
 * @property {string} [class] - Additional CSS classes to apply to the input element.
 * @property {string} [id] - The ID of the input element.
 * @property {string} [name] - The name of the input element.
 * @property {string} [autocomplete] - The autocomplete behavior for the input.
 * @property {string} [aria-describedby] - The ID of the element that describes the input.
 * @property {boolean} [aria-invalid] - Indicates that the input has an error.
 * @property {string} [aria-label] - A label for the input, for accessibility.
 * @property {string} [aria-labelledby] - The ID of the element that labels the input.
 */
export interface Props {
  type?: 'text' | 'email' | 'password' | 'number' | 'search' | 'tel' | 'url';
  placeholder?: string;
  value?: string;
  disabled?: boolean;
  required?: boolean;
  readonly?: boolean;
  class?: string;
  id?: string;
  name?: string;
  autocomplete?: string;
  'aria-describedby'?: string;
  'aria-invalid'?: boolean;
  'aria-label'?: string;
  'aria-labelledby'?: string;
}

const {
  type = 'text',
  class: className = '',
  disabled = false,
  required = false,
  readonly = false,
  ...props
} = Astro.props;

// Constitutional input styling with accessibility
const inputClasses = [
  "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm",
  "ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium",
  "placeholder:text-muted-foreground",
  "focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
  "disabled:cursor-not-allowed disabled:opacity-50",
  "aria-invalid:border-destructive aria-invalid:ring-destructive",
  className
].filter(Boolean).join(' ');
---

<input
  type={type}
  class={inputClasses}
  disabled={disabled}
  required={required}
  readonly={readonly}
  {...props}
/>

<style>
  /* Enhanced focus states for constitutional accessibility compliance */
  input:focus-visible {
    box-shadow: 0 0 0 2px hsl(var(--ring));
  }

  /* High contrast mode support */
  @media (prefers-contrast: high) {
    input {
      border-width: 2px;
    }

    input:focus-visible {
      border-color: hsl(var(--ring));
      box-shadow: 0 0 0 3px hsl(var(--ring));
    }
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    input {
      transition: none;
    }
  }

  /* Dark mode optimizations */
  .dark input::placeholder {
    opacity: 0.7;
  }

  /* File input styling */
  input[type="file"] {
    @apply cursor-pointer;
  }

  input[type="file"]::-webkit-file-upload-button {
    @apply mr-2 rounded-sm border-0 bg-transparent px-2 py-1 text-sm font-medium;
    @apply hover:bg-accent hover:text-accent-foreground;
  }

  /* Number input spinner styling */
  input[type="number"]::-webkit-outer-spin-button,
  input[type="number"]::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }

  input[type="number"] {
    -moz-appearance: textfield;
  }

  /* Search input styling */
  input[type="search"]::-webkit-search-decoration,
  input[type="search"]::-webkit-search-cancel-button,
  input[type="search"]::-webkit-search-results-button,
  input[type="search"]::-webkit-search-results-decoration {
    display: none;
  }
</style>